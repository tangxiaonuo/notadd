// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  accessTokenEntity: (where?: AccessTokenEntityWhereInput) => Promise<boolean>;
  addonEntity: (where?: AddonEntityWhereInput) => Promise<boolean>;
  addonPermissionEntity: (
    where?: AddonPermissionEntityWhereInput
  ) => Promise<boolean>;
  articleCategoryEntity: (
    where?: ArticleCategoryEntityWhereInput
  ) => Promise<boolean>;
  articleCommentEntity: (
    where?: ArticleCommentEntityWhereInput
  ) => Promise<boolean>;
  articleEntity: (where?: ArticleEntityWhereInput) => Promise<boolean>;
  loggerEntity: (where?: LoggerEntityWhereInput) => Promise<boolean>;
  memberEntity: (where?: MemberEntityWhereInput) => Promise<boolean>;
  messageEntity: (where?: MessageEntityWhereInput) => Promise<boolean>;
  organizationEntity: (
    where?: OrganizationEntityWhereInput
  ) => Promise<boolean>;
  permissionEntity: (where?: PermissionEntityWhereInput) => Promise<boolean>;
  postCategoryEntity: (
    where?: PostCategoryEntityWhereInput
  ) => Promise<boolean>;
  postEntity: (where?: PostEntityWhereInput) => Promise<boolean>;
  refreshTokenEntity: (
    where?: RefreshTokenEntityWhereInput
  ) => Promise<boolean>;
  roleEntity: (where?: RoleEntityWhereInput) => Promise<boolean>;
  rolePermissionEntity: (
    where?: RolePermissionEntityWhereInput
  ) => Promise<boolean>;
  userEntity: (where?: UserEntityWhereInput) => Promise<boolean>;
  userOrganizationEntity: (
    where?: UserOrganizationEntityWhereInput
  ) => Promise<boolean>;
  userRoleEntity: (where?: UserRoleEntityWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  accessTokenEntity: (
    where: AccessTokenEntityWhereUniqueInput
  ) => AccessTokenEntityNullablePromise;
  accessTokenEntities: (args?: {
    where?: AccessTokenEntityWhereInput;
    orderBy?: AccessTokenEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AccessTokenEntity>;
  accessTokenEntitiesConnection: (args?: {
    where?: AccessTokenEntityWhereInput;
    orderBy?: AccessTokenEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccessTokenEntityConnectionPromise;
  addonEntity: (
    where: AddonEntityWhereUniqueInput
  ) => AddonEntityNullablePromise;
  addonEntities: (args?: {
    where?: AddonEntityWhereInput;
    orderBy?: AddonEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AddonEntity>;
  addonEntitiesConnection: (args?: {
    where?: AddonEntityWhereInput;
    orderBy?: AddonEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddonEntityConnectionPromise;
  addonPermissionEntity: (
    where: AddonPermissionEntityWhereUniqueInput
  ) => AddonPermissionEntityNullablePromise;
  addonPermissionEntities: (args?: {
    where?: AddonPermissionEntityWhereInput;
    orderBy?: AddonPermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AddonPermissionEntity>;
  addonPermissionEntitiesConnection: (args?: {
    where?: AddonPermissionEntityWhereInput;
    orderBy?: AddonPermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddonPermissionEntityConnectionPromise;
  articleCategoryEntity: (
    where: ArticleCategoryEntityWhereUniqueInput
  ) => ArticleCategoryEntityNullablePromise;
  articleCategoryEntities: (args?: {
    where?: ArticleCategoryEntityWhereInput;
    orderBy?: ArticleCategoryEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ArticleCategoryEntity>;
  articleCategoryEntitiesConnection: (args?: {
    where?: ArticleCategoryEntityWhereInput;
    orderBy?: ArticleCategoryEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleCategoryEntityConnectionPromise;
  articleCommentEntity: (
    where: ArticleCommentEntityWhereUniqueInput
  ) => ArticleCommentEntityNullablePromise;
  articleCommentEntities: (args?: {
    where?: ArticleCommentEntityWhereInput;
    orderBy?: ArticleCommentEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ArticleCommentEntity>;
  articleCommentEntitiesConnection: (args?: {
    where?: ArticleCommentEntityWhereInput;
    orderBy?: ArticleCommentEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleCommentEntityConnectionPromise;
  articleEntity: (
    where: ArticleEntityWhereUniqueInput
  ) => ArticleEntityNullablePromise;
  articleEntities: (args?: {
    where?: ArticleEntityWhereInput;
    orderBy?: ArticleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ArticleEntity>;
  articleEntitiesConnection: (args?: {
    where?: ArticleEntityWhereInput;
    orderBy?: ArticleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleEntityConnectionPromise;
  loggerEntity: (
    where: LoggerEntityWhereUniqueInput
  ) => LoggerEntityNullablePromise;
  loggerEntities: (args?: {
    where?: LoggerEntityWhereInput;
    orderBy?: LoggerEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<LoggerEntity>;
  loggerEntitiesConnection: (args?: {
    where?: LoggerEntityWhereInput;
    orderBy?: LoggerEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LoggerEntityConnectionPromise;
  memberEntity: (
    where: MemberEntityWhereUniqueInput
  ) => MemberEntityNullablePromise;
  memberEntities: (args?: {
    where?: MemberEntityWhereInput;
    orderBy?: MemberEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MemberEntity>;
  memberEntitiesConnection: (args?: {
    where?: MemberEntityWhereInput;
    orderBy?: MemberEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MemberEntityConnectionPromise;
  messageEntity: (
    where: MessageEntityWhereUniqueInput
  ) => MessageEntityNullablePromise;
  messageEntities: (args?: {
    where?: MessageEntityWhereInput;
    orderBy?: MessageEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MessageEntity>;
  messageEntitiesConnection: (args?: {
    where?: MessageEntityWhereInput;
    orderBy?: MessageEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageEntityConnectionPromise;
  organizationEntity: (
    where: OrganizationEntityWhereUniqueInput
  ) => OrganizationEntityNullablePromise;
  organizationEntities: (args?: {
    where?: OrganizationEntityWhereInput;
    orderBy?: OrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrganizationEntity>;
  organizationEntitiesConnection: (args?: {
    where?: OrganizationEntityWhereInput;
    orderBy?: OrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationEntityConnectionPromise;
  permissionEntity: (
    where: PermissionEntityWhereUniqueInput
  ) => PermissionEntityNullablePromise;
  permissionEntities: (args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PermissionEntity>;
  permissionEntitiesConnection: (args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PermissionEntityConnectionPromise;
  postCategoryEntity: (
    where: PostCategoryEntityWhereUniqueInput
  ) => PostCategoryEntityNullablePromise;
  postCategoryEntities: (args?: {
    where?: PostCategoryEntityWhereInput;
    orderBy?: PostCategoryEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PostCategoryEntity>;
  postCategoryEntitiesConnection: (args?: {
    where?: PostCategoryEntityWhereInput;
    orderBy?: PostCategoryEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostCategoryEntityConnectionPromise;
  postEntity: (where: PostEntityWhereUniqueInput) => PostEntityNullablePromise;
  postEntities: (args?: {
    where?: PostEntityWhereInput;
    orderBy?: PostEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PostEntity>;
  postEntitiesConnection: (args?: {
    where?: PostEntityWhereInput;
    orderBy?: PostEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostEntityConnectionPromise;
  refreshTokenEntity: (
    where: RefreshTokenEntityWhereUniqueInput
  ) => RefreshTokenEntityNullablePromise;
  refreshTokenEntities: (args?: {
    where?: RefreshTokenEntityWhereInput;
    orderBy?: RefreshTokenEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RefreshTokenEntity>;
  refreshTokenEntitiesConnection: (args?: {
    where?: RefreshTokenEntityWhereInput;
    orderBy?: RefreshTokenEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RefreshTokenEntityConnectionPromise;
  roleEntity: (where: RoleEntityWhereUniqueInput) => RoleEntityNullablePromise;
  roleEntities: (args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RoleEntity>;
  roleEntitiesConnection: (args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleEntityConnectionPromise;
  rolePermissionEntity: (
    where: RolePermissionEntityWhereUniqueInput
  ) => RolePermissionEntityNullablePromise;
  rolePermissionEntities: (args?: {
    where?: RolePermissionEntityWhereInput;
    orderBy?: RolePermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RolePermissionEntity>;
  rolePermissionEntitiesConnection: (args?: {
    where?: RolePermissionEntityWhereInput;
    orderBy?: RolePermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RolePermissionEntityConnectionPromise;
  userEntity: (where: UserEntityWhereUniqueInput) => UserEntityNullablePromise;
  userEntities: (args?: {
    where?: UserEntityWhereInput;
    orderBy?: UserEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserEntity>;
  userEntitiesConnection: (args?: {
    where?: UserEntityWhereInput;
    orderBy?: UserEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserEntityConnectionPromise;
  userOrganizationEntity: (
    where: UserOrganizationEntityWhereUniqueInput
  ) => UserOrganizationEntityNullablePromise;
  userOrganizationEntities: (args?: {
    where?: UserOrganizationEntityWhereInput;
    orderBy?: UserOrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserOrganizationEntity>;
  userOrganizationEntitiesConnection: (args?: {
    where?: UserOrganizationEntityWhereInput;
    orderBy?: UserOrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserOrganizationEntityConnectionPromise;
  userRoleEntity: (
    where: UserRoleEntityWhereUniqueInput
  ) => UserRoleEntityNullablePromise;
  userRoleEntities: (args?: {
    where?: UserRoleEntityWhereInput;
    orderBy?: UserRoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserRoleEntity>;
  userRoleEntitiesConnection: (args?: {
    where?: UserRoleEntityWhereInput;
    orderBy?: UserRoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserRoleEntityConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccessTokenEntity: (
    data: AccessTokenEntityCreateInput
  ) => AccessTokenEntityPromise;
  updateAccessTokenEntity: (args: {
    data: AccessTokenEntityUpdateInput;
    where: AccessTokenEntityWhereUniqueInput;
  }) => AccessTokenEntityPromise;
  updateManyAccessTokenEntities: (args: {
    data: AccessTokenEntityUpdateManyMutationInput;
    where?: AccessTokenEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertAccessTokenEntity: (args: {
    where: AccessTokenEntityWhereUniqueInput;
    create: AccessTokenEntityCreateInput;
    update: AccessTokenEntityUpdateInput;
  }) => AccessTokenEntityPromise;
  deleteAccessTokenEntity: (
    where: AccessTokenEntityWhereUniqueInput
  ) => AccessTokenEntityPromise;
  deleteManyAccessTokenEntities: (
    where?: AccessTokenEntityWhereInput
  ) => BatchPayloadPromise;
  createAddonEntity: (data: AddonEntityCreateInput) => AddonEntityPromise;
  updateAddonEntity: (args: {
    data: AddonEntityUpdateInput;
    where: AddonEntityWhereUniqueInput;
  }) => AddonEntityPromise;
  updateManyAddonEntities: (args: {
    data: AddonEntityUpdateManyMutationInput;
    where?: AddonEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertAddonEntity: (args: {
    where: AddonEntityWhereUniqueInput;
    create: AddonEntityCreateInput;
    update: AddonEntityUpdateInput;
  }) => AddonEntityPromise;
  deleteAddonEntity: (where: AddonEntityWhereUniqueInput) => AddonEntityPromise;
  deleteManyAddonEntities: (
    where?: AddonEntityWhereInput
  ) => BatchPayloadPromise;
  createAddonPermissionEntity: (
    data: AddonPermissionEntityCreateInput
  ) => AddonPermissionEntityPromise;
  updateAddonPermissionEntity: (args: {
    data: AddonPermissionEntityUpdateInput;
    where: AddonPermissionEntityWhereUniqueInput;
  }) => AddonPermissionEntityPromise;
  updateManyAddonPermissionEntities: (args: {
    data: AddonPermissionEntityUpdateManyMutationInput;
    where?: AddonPermissionEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertAddonPermissionEntity: (args: {
    where: AddonPermissionEntityWhereUniqueInput;
    create: AddonPermissionEntityCreateInput;
    update: AddonPermissionEntityUpdateInput;
  }) => AddonPermissionEntityPromise;
  deleteAddonPermissionEntity: (
    where: AddonPermissionEntityWhereUniqueInput
  ) => AddonPermissionEntityPromise;
  deleteManyAddonPermissionEntities: (
    where?: AddonPermissionEntityWhereInput
  ) => BatchPayloadPromise;
  createArticleCategoryEntity: (
    data: ArticleCategoryEntityCreateInput
  ) => ArticleCategoryEntityPromise;
  updateArticleCategoryEntity: (args: {
    data: ArticleCategoryEntityUpdateInput;
    where: ArticleCategoryEntityWhereUniqueInput;
  }) => ArticleCategoryEntityPromise;
  updateManyArticleCategoryEntities: (args: {
    data: ArticleCategoryEntityUpdateManyMutationInput;
    where?: ArticleCategoryEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertArticleCategoryEntity: (args: {
    where: ArticleCategoryEntityWhereUniqueInput;
    create: ArticleCategoryEntityCreateInput;
    update: ArticleCategoryEntityUpdateInput;
  }) => ArticleCategoryEntityPromise;
  deleteArticleCategoryEntity: (
    where: ArticleCategoryEntityWhereUniqueInput
  ) => ArticleCategoryEntityPromise;
  deleteManyArticleCategoryEntities: (
    where?: ArticleCategoryEntityWhereInput
  ) => BatchPayloadPromise;
  createArticleCommentEntity: (
    data: ArticleCommentEntityCreateInput
  ) => ArticleCommentEntityPromise;
  updateArticleCommentEntity: (args: {
    data: ArticleCommentEntityUpdateInput;
    where: ArticleCommentEntityWhereUniqueInput;
  }) => ArticleCommentEntityPromise;
  updateManyArticleCommentEntities: (args: {
    data: ArticleCommentEntityUpdateManyMutationInput;
    where?: ArticleCommentEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertArticleCommentEntity: (args: {
    where: ArticleCommentEntityWhereUniqueInput;
    create: ArticleCommentEntityCreateInput;
    update: ArticleCommentEntityUpdateInput;
  }) => ArticleCommentEntityPromise;
  deleteArticleCommentEntity: (
    where: ArticleCommentEntityWhereUniqueInput
  ) => ArticleCommentEntityPromise;
  deleteManyArticleCommentEntities: (
    where?: ArticleCommentEntityWhereInput
  ) => BatchPayloadPromise;
  createArticleEntity: (data: ArticleEntityCreateInput) => ArticleEntityPromise;
  updateArticleEntity: (args: {
    data: ArticleEntityUpdateInput;
    where: ArticleEntityWhereUniqueInput;
  }) => ArticleEntityPromise;
  updateManyArticleEntities: (args: {
    data: ArticleEntityUpdateManyMutationInput;
    where?: ArticleEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertArticleEntity: (args: {
    where: ArticleEntityWhereUniqueInput;
    create: ArticleEntityCreateInput;
    update: ArticleEntityUpdateInput;
  }) => ArticleEntityPromise;
  deleteArticleEntity: (
    where: ArticleEntityWhereUniqueInput
  ) => ArticleEntityPromise;
  deleteManyArticleEntities: (
    where?: ArticleEntityWhereInput
  ) => BatchPayloadPromise;
  createLoggerEntity: (data: LoggerEntityCreateInput) => LoggerEntityPromise;
  updateLoggerEntity: (args: {
    data: LoggerEntityUpdateInput;
    where: LoggerEntityWhereUniqueInput;
  }) => LoggerEntityPromise;
  updateManyLoggerEntities: (args: {
    data: LoggerEntityUpdateManyMutationInput;
    where?: LoggerEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertLoggerEntity: (args: {
    where: LoggerEntityWhereUniqueInput;
    create: LoggerEntityCreateInput;
    update: LoggerEntityUpdateInput;
  }) => LoggerEntityPromise;
  deleteLoggerEntity: (
    where: LoggerEntityWhereUniqueInput
  ) => LoggerEntityPromise;
  deleteManyLoggerEntities: (
    where?: LoggerEntityWhereInput
  ) => BatchPayloadPromise;
  createMemberEntity: (data: MemberEntityCreateInput) => MemberEntityPromise;
  updateMemberEntity: (args: {
    data: MemberEntityUpdateInput;
    where: MemberEntityWhereUniqueInput;
  }) => MemberEntityPromise;
  updateManyMemberEntities: (args: {
    data: MemberEntityUpdateManyMutationInput;
    where?: MemberEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertMemberEntity: (args: {
    where: MemberEntityWhereUniqueInput;
    create: MemberEntityCreateInput;
    update: MemberEntityUpdateInput;
  }) => MemberEntityPromise;
  deleteMemberEntity: (
    where: MemberEntityWhereUniqueInput
  ) => MemberEntityPromise;
  deleteManyMemberEntities: (
    where?: MemberEntityWhereInput
  ) => BatchPayloadPromise;
  createMessageEntity: (data: MessageEntityCreateInput) => MessageEntityPromise;
  updateMessageEntity: (args: {
    data: MessageEntityUpdateInput;
    where: MessageEntityWhereUniqueInput;
  }) => MessageEntityPromise;
  updateManyMessageEntities: (args: {
    data: MessageEntityUpdateManyMutationInput;
    where?: MessageEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertMessageEntity: (args: {
    where: MessageEntityWhereUniqueInput;
    create: MessageEntityCreateInput;
    update: MessageEntityUpdateInput;
  }) => MessageEntityPromise;
  deleteMessageEntity: (
    where: MessageEntityWhereUniqueInput
  ) => MessageEntityPromise;
  deleteManyMessageEntities: (
    where?: MessageEntityWhereInput
  ) => BatchPayloadPromise;
  createOrganizationEntity: (
    data: OrganizationEntityCreateInput
  ) => OrganizationEntityPromise;
  updateOrganizationEntity: (args: {
    data: OrganizationEntityUpdateInput;
    where: OrganizationEntityWhereUniqueInput;
  }) => OrganizationEntityPromise;
  updateManyOrganizationEntities: (args: {
    data: OrganizationEntityUpdateManyMutationInput;
    where?: OrganizationEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganizationEntity: (args: {
    where: OrganizationEntityWhereUniqueInput;
    create: OrganizationEntityCreateInput;
    update: OrganizationEntityUpdateInput;
  }) => OrganizationEntityPromise;
  deleteOrganizationEntity: (
    where: OrganizationEntityWhereUniqueInput
  ) => OrganizationEntityPromise;
  deleteManyOrganizationEntities: (
    where?: OrganizationEntityWhereInput
  ) => BatchPayloadPromise;
  createPermissionEntity: (
    data: PermissionEntityCreateInput
  ) => PermissionEntityPromise;
  updatePermissionEntity: (args: {
    data: PermissionEntityUpdateInput;
    where: PermissionEntityWhereUniqueInput;
  }) => PermissionEntityPromise;
  updateManyPermissionEntities: (args: {
    data: PermissionEntityUpdateManyMutationInput;
    where?: PermissionEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertPermissionEntity: (args: {
    where: PermissionEntityWhereUniqueInput;
    create: PermissionEntityCreateInput;
    update: PermissionEntityUpdateInput;
  }) => PermissionEntityPromise;
  deletePermissionEntity: (
    where: PermissionEntityWhereUniqueInput
  ) => PermissionEntityPromise;
  deleteManyPermissionEntities: (
    where?: PermissionEntityWhereInput
  ) => BatchPayloadPromise;
  createPostCategoryEntity: (
    data: PostCategoryEntityCreateInput
  ) => PostCategoryEntityPromise;
  updatePostCategoryEntity: (args: {
    data: PostCategoryEntityUpdateInput;
    where: PostCategoryEntityWhereUniqueInput;
  }) => PostCategoryEntityPromise;
  updateManyPostCategoryEntities: (args: {
    data: PostCategoryEntityUpdateManyMutationInput;
    where?: PostCategoryEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertPostCategoryEntity: (args: {
    where: PostCategoryEntityWhereUniqueInput;
    create: PostCategoryEntityCreateInput;
    update: PostCategoryEntityUpdateInput;
  }) => PostCategoryEntityPromise;
  deletePostCategoryEntity: (
    where: PostCategoryEntityWhereUniqueInput
  ) => PostCategoryEntityPromise;
  deleteManyPostCategoryEntities: (
    where?: PostCategoryEntityWhereInput
  ) => BatchPayloadPromise;
  createPostEntity: (data: PostEntityCreateInput) => PostEntityPromise;
  updatePostEntity: (args: {
    data: PostEntityUpdateInput;
    where: PostEntityWhereUniqueInput;
  }) => PostEntityPromise;
  updateManyPostEntities: (args: {
    data: PostEntityUpdateManyMutationInput;
    where?: PostEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertPostEntity: (args: {
    where: PostEntityWhereUniqueInput;
    create: PostEntityCreateInput;
    update: PostEntityUpdateInput;
  }) => PostEntityPromise;
  deletePostEntity: (where: PostEntityWhereUniqueInput) => PostEntityPromise;
  deleteManyPostEntities: (where?: PostEntityWhereInput) => BatchPayloadPromise;
  createRefreshTokenEntity: (
    data: RefreshTokenEntityCreateInput
  ) => RefreshTokenEntityPromise;
  updateRefreshTokenEntity: (args: {
    data: RefreshTokenEntityUpdateInput;
    where: RefreshTokenEntityWhereUniqueInput;
  }) => RefreshTokenEntityPromise;
  updateManyRefreshTokenEntities: (args: {
    data: RefreshTokenEntityUpdateManyMutationInput;
    where?: RefreshTokenEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertRefreshTokenEntity: (args: {
    where: RefreshTokenEntityWhereUniqueInput;
    create: RefreshTokenEntityCreateInput;
    update: RefreshTokenEntityUpdateInput;
  }) => RefreshTokenEntityPromise;
  deleteRefreshTokenEntity: (
    where: RefreshTokenEntityWhereUniqueInput
  ) => RefreshTokenEntityPromise;
  deleteManyRefreshTokenEntities: (
    where?: RefreshTokenEntityWhereInput
  ) => BatchPayloadPromise;
  createRoleEntity: (data: RoleEntityCreateInput) => RoleEntityPromise;
  updateRoleEntity: (args: {
    data: RoleEntityUpdateInput;
    where: RoleEntityWhereUniqueInput;
  }) => RoleEntityPromise;
  updateManyRoleEntities: (args: {
    data: RoleEntityUpdateManyMutationInput;
    where?: RoleEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertRoleEntity: (args: {
    where: RoleEntityWhereUniqueInput;
    create: RoleEntityCreateInput;
    update: RoleEntityUpdateInput;
  }) => RoleEntityPromise;
  deleteRoleEntity: (where: RoleEntityWhereUniqueInput) => RoleEntityPromise;
  deleteManyRoleEntities: (where?: RoleEntityWhereInput) => BatchPayloadPromise;
  createRolePermissionEntity: (
    data: RolePermissionEntityCreateInput
  ) => RolePermissionEntityPromise;
  updateRolePermissionEntity: (args: {
    data: RolePermissionEntityUpdateInput;
    where: RolePermissionEntityWhereUniqueInput;
  }) => RolePermissionEntityPromise;
  updateManyRolePermissionEntities: (args: {
    data: RolePermissionEntityUpdateManyMutationInput;
    where?: RolePermissionEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertRolePermissionEntity: (args: {
    where: RolePermissionEntityWhereUniqueInput;
    create: RolePermissionEntityCreateInput;
    update: RolePermissionEntityUpdateInput;
  }) => RolePermissionEntityPromise;
  deleteRolePermissionEntity: (
    where: RolePermissionEntityWhereUniqueInput
  ) => RolePermissionEntityPromise;
  deleteManyRolePermissionEntities: (
    where?: RolePermissionEntityWhereInput
  ) => BatchPayloadPromise;
  createUserEntity: (data: UserEntityCreateInput) => UserEntityPromise;
  updateUserEntity: (args: {
    data: UserEntityUpdateInput;
    where: UserEntityWhereUniqueInput;
  }) => UserEntityPromise;
  updateManyUserEntities: (args: {
    data: UserEntityUpdateManyMutationInput;
    where?: UserEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertUserEntity: (args: {
    where: UserEntityWhereUniqueInput;
    create: UserEntityCreateInput;
    update: UserEntityUpdateInput;
  }) => UserEntityPromise;
  deleteUserEntity: (where: UserEntityWhereUniqueInput) => UserEntityPromise;
  deleteManyUserEntities: (where?: UserEntityWhereInput) => BatchPayloadPromise;
  createUserOrganizationEntity: (
    data: UserOrganizationEntityCreateInput
  ) => UserOrganizationEntityPromise;
  updateUserOrganizationEntity: (args: {
    data: UserOrganizationEntityUpdateInput;
    where: UserOrganizationEntityWhereUniqueInput;
  }) => UserOrganizationEntityPromise;
  updateManyUserOrganizationEntities: (args: {
    data: UserOrganizationEntityUpdateManyMutationInput;
    where?: UserOrganizationEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertUserOrganizationEntity: (args: {
    where: UserOrganizationEntityWhereUniqueInput;
    create: UserOrganizationEntityCreateInput;
    update: UserOrganizationEntityUpdateInput;
  }) => UserOrganizationEntityPromise;
  deleteUserOrganizationEntity: (
    where: UserOrganizationEntityWhereUniqueInput
  ) => UserOrganizationEntityPromise;
  deleteManyUserOrganizationEntities: (
    where?: UserOrganizationEntityWhereInput
  ) => BatchPayloadPromise;
  createUserRoleEntity: (
    data: UserRoleEntityCreateInput
  ) => UserRoleEntityPromise;
  updateUserRoleEntity: (args: {
    data: UserRoleEntityUpdateInput;
    where: UserRoleEntityWhereUniqueInput;
  }) => UserRoleEntityPromise;
  updateManyUserRoleEntities: (args: {
    data: UserRoleEntityUpdateManyMutationInput;
    where?: UserRoleEntityWhereInput;
  }) => BatchPayloadPromise;
  upsertUserRoleEntity: (args: {
    where: UserRoleEntityWhereUniqueInput;
    create: UserRoleEntityCreateInput;
    update: UserRoleEntityUpdateInput;
  }) => UserRoleEntityPromise;
  deleteUserRoleEntity: (
    where: UserRoleEntityWhereUniqueInput
  ) => UserRoleEntityPromise;
  deleteManyUserRoleEntities: (
    where?: UserRoleEntityWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  accessTokenEntity: (
    where?: AccessTokenEntitySubscriptionWhereInput
  ) => AccessTokenEntitySubscriptionPayloadSubscription;
  addonEntity: (
    where?: AddonEntitySubscriptionWhereInput
  ) => AddonEntitySubscriptionPayloadSubscription;
  addonPermissionEntity: (
    where?: AddonPermissionEntitySubscriptionWhereInput
  ) => AddonPermissionEntitySubscriptionPayloadSubscription;
  articleCategoryEntity: (
    where?: ArticleCategoryEntitySubscriptionWhereInput
  ) => ArticleCategoryEntitySubscriptionPayloadSubscription;
  articleCommentEntity: (
    where?: ArticleCommentEntitySubscriptionWhereInput
  ) => ArticleCommentEntitySubscriptionPayloadSubscription;
  articleEntity: (
    where?: ArticleEntitySubscriptionWhereInput
  ) => ArticleEntitySubscriptionPayloadSubscription;
  loggerEntity: (
    where?: LoggerEntitySubscriptionWhereInput
  ) => LoggerEntitySubscriptionPayloadSubscription;
  memberEntity: (
    where?: MemberEntitySubscriptionWhereInput
  ) => MemberEntitySubscriptionPayloadSubscription;
  messageEntity: (
    where?: MessageEntitySubscriptionWhereInput
  ) => MessageEntitySubscriptionPayloadSubscription;
  organizationEntity: (
    where?: OrganizationEntitySubscriptionWhereInput
  ) => OrganizationEntitySubscriptionPayloadSubscription;
  permissionEntity: (
    where?: PermissionEntitySubscriptionWhereInput
  ) => PermissionEntitySubscriptionPayloadSubscription;
  postCategoryEntity: (
    where?: PostCategoryEntitySubscriptionWhereInput
  ) => PostCategoryEntitySubscriptionPayloadSubscription;
  postEntity: (
    where?: PostEntitySubscriptionWhereInput
  ) => PostEntitySubscriptionPayloadSubscription;
  refreshTokenEntity: (
    where?: RefreshTokenEntitySubscriptionWhereInput
  ) => RefreshTokenEntitySubscriptionPayloadSubscription;
  roleEntity: (
    where?: RoleEntitySubscriptionWhereInput
  ) => RoleEntitySubscriptionPayloadSubscription;
  rolePermissionEntity: (
    where?: RolePermissionEntitySubscriptionWhereInput
  ) => RolePermissionEntitySubscriptionPayloadSubscription;
  userEntity: (
    where?: UserEntitySubscriptionWhereInput
  ) => UserEntitySubscriptionPayloadSubscription;
  userOrganizationEntity: (
    where?: UserOrganizationEntitySubscriptionWhereInput
  ) => UserOrganizationEntitySubscriptionPayloadSubscription;
  userRoleEntity: (
    where?: UserRoleEntitySubscriptionWhereInput
  ) => UserRoleEntitySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MemberEntityOrderByInput =
  | "member_id_ASC"
  | "member_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "realname_ASC"
  | "realname_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "salt_ASC"
  | "salt_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type PermissionEntityOrderByInput =
  | "father_name_ASC"
  | "father_name_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "decription_ASC"
  | "decription_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "status_ASC"
  | "status_DESC"
  | "displayorder_ASC"
  | "displayorder_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type LoggerEntityOrderByInput =
  | "logger_id_ASC"
  | "logger_id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "start_time_ASC"
  | "start_time_DESC"
  | "end_time_ASC"
  | "end_time_DESC"
  | "params_ASC"
  | "params_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "result_ASC"
  | "result_DESC"
  | "permissions_ASC"
  | "permissions_DESC";

export type UserRoleEntityOrderByInput =
  | "user_role_id_ASC"
  | "user_role_id_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "role_id_ASC"
  | "role_id_DESC";

export type ArticleEntityOrderByInput =
  | "article_id_ASC"
  | "article_id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "thumbs_ASC"
  | "thumbs_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "article_category_id_ASC"
  | "article_category_id_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type RolePermissionEntityOrderByInput =
  | "role_permission_id_ASC"
  | "role_permission_id_DESC"
  | "role_id_ASC"
  | "role_id_DESC"
  | "permission_id_ASC"
  | "permission_id_DESC";

export type ArticleCommentEntityOrderByInput =
  | "article_comment_id_ASC"
  | "article_comment_id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "article_id_ASC"
  | "article_id_DESC"
  | "from_user_id_ASC"
  | "from_user_id_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type PostEntityOrderByInput =
  | "post_id_ASC"
  | "post_id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "status_ASC"
  | "status_DESC"
  | "handler_user_ASC"
  | "handler_user_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type ArticleCategoryEntityOrderByInput =
  | "article_category_id_ASC"
  | "article_category_id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "name_ASC"
  | "name_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "description_ASC"
  | "description_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type PostCategoryEntityOrderByInput =
  | "post_post_category_idid_ASC"
  | "post_post_category_idid_DESC"
  | "title_ASC"
  | "title_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "description_ASC"
  | "description_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type AddonPermissionEntityOrderByInput =
  | "addon_permission_id_ASC"
  | "addon_permission_id_DESC"
  | "addon_id_ASC"
  | "addon_id_DESC"
  | "permission_id_ASC"
  | "permission_id_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddonEntityOrderByInput =
  | "appid_ASC"
  | "appid_DESC"
  | "pid_ASC"
  | "pid_DESC"
  | "appsecret_ASC"
  | "appsecret_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type UserEntityOrderByInput =
  | "user_id_ASC"
  | "user_id_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "unionid_ASC"
  | "unionid_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "salt_ASC"
  | "salt_DESC"
  | "realname_ASC"
  | "realname_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type RoleEntityOrderByInput =
  | "role_id_ASC"
  | "role_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type OrganizationEntityOrderByInput =
  | "organization_id_ASC"
  | "organization_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC"
  | "displayorder_ASC"
  | "displayorder_DESC";

export type UserOrganizationEntityOrderByInput =
  | "user_orgainization_id_ASC"
  | "user_orgainization_id_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "orgainization_id_ASC"
  | "orgainization_id_DESC";

export type MessageEntityOrderByInput =
  | "msg_id_ASC"
  | "msg_id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "msg_type_ASC"
  | "msg_type_DESC"
  | "pic_url_ASC"
  | "pic_url_DESC"
  | "media_id_ASC"
  | "media_id_DESC"
  | "thumb_media_id_ASC"
  | "thumb_media_id_DESC"
  | "location_x_ASC"
  | "location_x_DESC"
  | "location_y_ASC"
  | "location_y_DESC"
  | "label_ASC"
  | "label_DESC"
  | "title_ASC"
  | "title_DESC"
  | "url_ASC"
  | "url_DESC"
  | "description_ASC"
  | "description_DESC"
  | "from_user_ASC"
  | "from_user_DESC"
  | "to_user_ASC"
  | "to_user_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export type AccessTokenEntityOrderByInput =
  | "access_token_id_ASC"
  | "access_token_id_DESC"
  | "access_token_ASC"
  | "access_token_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "appid_ASC"
  | "appid_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "platform_ASC"
  | "platform_DESC"
  | "grant_type_ASC"
  | "grant_type_DESC"
  | "scope_ASC"
  | "scope_DESC"
  | "expires_in_ASC"
  | "expires_in_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC"
  | "status_ASC"
  | "status_DESC";

export type RefreshTokenEntityOrderByInput =
  | "refresh_token_id_ASC"
  | "refresh_token_id_DESC"
  | "refresh_token_ASC"
  | "refresh_token_DESC"
  | "expires_in_ASC"
  | "expires_in_DESC"
  | "create_time_ASC"
  | "create_time_DESC"
  | "update_time_ASC"
  | "update_time_DESC";

export interface RoleEntityCreateWithoutPermissionsInput {
  role_id?: Maybe<Int>;
  name: String;
  title: String;
  description: String;
}

export type AccessTokenEntityWhereUniqueInput = AtLeastOne<{
  access_token_id: Maybe<Int>;
}>;

export interface MemberEntityUpdateInput {
  name?: Maybe<String>;
  realname?: Maybe<String>;
  phone?: Maybe<String>;
  openid?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  salt?: Maybe<String>;
}

export interface RoleEntityUpdateWithWhereUniqueWithoutPermissionsInput {
  where: RoleEntityWhereUniqueInput;
  data: RoleEntityUpdateWithoutPermissionsDataInput;
}

export interface MemberEntityCreateInput {
  member_id?: Maybe<Int>;
  name: String;
  realname: String;
  phone: String;
  openid: String;
  email: String;
  username: String;
  password: String;
  salt: String;
}

export interface AddonEntityUpsertWithWhereUniqueNestedInput {
  where: AddonEntityWhereUniqueInput;
  update: AddonEntityUpdateDataInput;
  create: AddonEntityCreateInput;
}

export interface LoggerEntityUpdateManyMutationInput {
  description?: Maybe<String>;
  openid?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  params?: Maybe<String>;
  ip?: Maybe<String>;
  result?: Maybe<String>;
  permissions?: Maybe<String>;
}

export interface UserRoleEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserRoleEntityWhereInput>;
  AND?: Maybe<
    | UserRoleEntitySubscriptionWhereInput[]
    | UserRoleEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | UserRoleEntitySubscriptionWhereInput[]
    | UserRoleEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UserRoleEntitySubscriptionWhereInput[]
    | UserRoleEntitySubscriptionWhereInput
  >;
}

export interface LoggerEntityUpdateInput {
  description?: Maybe<String>;
  openid?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  params?: Maybe<String>;
  ip?: Maybe<String>;
  result?: Maybe<String>;
  permissions?: Maybe<String>;
}

export interface UserOrganizationEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserOrganizationEntityWhereInput>;
  AND?: Maybe<
    | UserOrganizationEntitySubscriptionWhereInput[]
    | UserOrganizationEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | UserOrganizationEntitySubscriptionWhereInput[]
    | UserOrganizationEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UserOrganizationEntitySubscriptionWhereInput[]
    | UserOrganizationEntitySubscriptionWhereInput
  >;
}

export type UserEntityWhereUniqueInput = AtLeastOne<{
  user_id: Maybe<Int>;
}>;

export interface UserEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserEntityWhereInput>;
  AND?: Maybe<
    UserEntitySubscriptionWhereInput[] | UserEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    UserEntitySubscriptionWhereInput[] | UserEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserEntitySubscriptionWhereInput[] | UserEntitySubscriptionWhereInput
  >;
}

export interface LoggerEntityCreateInput {
  logger_id?: Maybe<Int>;
  description: String;
  openid: String;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  params: String;
  ip: String;
  result: String;
  permissions: String;
}

export interface RoleEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleEntityWhereInput>;
  AND?: Maybe<
    RoleEntitySubscriptionWhereInput[] | RoleEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    RoleEntitySubscriptionWhereInput[] | RoleEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    RoleEntitySubscriptionWhereInput[] | RoleEntitySubscriptionWhereInput
  >;
}

export interface ArticleEntityUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  thumbs?: Maybe<String>;
  icon?: Maybe<String>;
  article_category_id?: Maybe<Int>;
}

export type AddonPermissionEntityWhereUniqueInput = AtLeastOne<{
  addon_permission_id: Maybe<Int>;
}>;

export interface ArticleEntityUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  thumbs?: Maybe<String>;
  icon?: Maybe<String>;
  article_category_id?: Maybe<Int>;
}

export interface AddonPermissionEntityWhereInput {
  addon_permission_id?: Maybe<Int>;
  addon_permission_id_not?: Maybe<Int>;
  addon_permission_id_in?: Maybe<Int[] | Int>;
  addon_permission_id_not_in?: Maybe<Int[] | Int>;
  addon_permission_id_lt?: Maybe<Int>;
  addon_permission_id_lte?: Maybe<Int>;
  addon_permission_id_gt?: Maybe<Int>;
  addon_permission_id_gte?: Maybe<Int>;
  addon_id?: Maybe<Int>;
  addon_id_not?: Maybe<Int>;
  addon_id_in?: Maybe<Int[] | Int>;
  addon_id_not_in?: Maybe<Int[] | Int>;
  addon_id_lt?: Maybe<Int>;
  addon_id_lte?: Maybe<Int>;
  addon_id_gt?: Maybe<Int>;
  addon_id_gte?: Maybe<Int>;
  permission_id?: Maybe<Int>;
  permission_id_not?: Maybe<Int>;
  permission_id_in?: Maybe<Int[] | Int>;
  permission_id_not_in?: Maybe<Int[] | Int>;
  permission_id_lt?: Maybe<Int>;
  permission_id_lte?: Maybe<Int>;
  permission_id_gt?: Maybe<Int>;
  permission_id_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    AddonPermissionEntityWhereInput[] | AddonPermissionEntityWhereInput
  >;
  OR?: Maybe<
    AddonPermissionEntityWhereInput[] | AddonPermissionEntityWhereInput
  >;
  NOT?: Maybe<
    AddonPermissionEntityWhereInput[] | AddonPermissionEntityWhereInput
  >;
}

export type UserOrganizationEntityWhereUniqueInput = AtLeastOne<{
  user_orgainization_id: Maybe<Int>;
}>;

export interface PostCategoryEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostCategoryEntityWhereInput>;
  AND?: Maybe<
    | PostCategoryEntitySubscriptionWhereInput[]
    | PostCategoryEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | PostCategoryEntitySubscriptionWhereInput[]
    | PostCategoryEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PostCategoryEntitySubscriptionWhereInput[]
    | PostCategoryEntitySubscriptionWhereInput
  >;
}

export interface ArticleEntityCreateInput {
  article_id?: Maybe<Int>;
  title: String;
  description: String;
  thumbs: String;
  icon: String;
  article_category_id: Int;
}

export interface OrganizationEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationEntityWhereInput>;
  AND?: Maybe<
    | OrganizationEntitySubscriptionWhereInput[]
    | OrganizationEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | OrganizationEntitySubscriptionWhereInput[]
    | OrganizationEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | OrganizationEntitySubscriptionWhereInput[]
    | OrganizationEntitySubscriptionWhereInput
  >;
}

export interface UserOrganizationEntityWhereInput {
  user_orgainization_id?: Maybe<Int>;
  user_orgainization_id_not?: Maybe<Int>;
  user_orgainization_id_in?: Maybe<Int[] | Int>;
  user_orgainization_id_not_in?: Maybe<Int[] | Int>;
  user_orgainization_id_lt?: Maybe<Int>;
  user_orgainization_id_lte?: Maybe<Int>;
  user_orgainization_id_gt?: Maybe<Int>;
  user_orgainization_id_gte?: Maybe<Int>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  orgainization_id?: Maybe<Int>;
  orgainization_id_not?: Maybe<Int>;
  orgainization_id_in?: Maybe<Int[] | Int>;
  orgainization_id_not_in?: Maybe<Int[] | Int>;
  orgainization_id_lt?: Maybe<Int>;
  orgainization_id_lte?: Maybe<Int>;
  orgainization_id_gt?: Maybe<Int>;
  orgainization_id_gte?: Maybe<Int>;
  AND?: Maybe<
    UserOrganizationEntityWhereInput[] | UserOrganizationEntityWhereInput
  >;
  OR?: Maybe<
    UserOrganizationEntityWhereInput[] | UserOrganizationEntityWhereInput
  >;
  NOT?: Maybe<
    UserOrganizationEntityWhereInput[] | UserOrganizationEntityWhereInput
  >;
}

export interface MessageEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageEntityWhereInput>;
  AND?: Maybe<
    MessageEntitySubscriptionWhereInput[] | MessageEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    MessageEntitySubscriptionWhereInput[] | MessageEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    MessageEntitySubscriptionWhereInput[] | MessageEntitySubscriptionWhereInput
  >;
}

export interface ArticleCommentEntityUpdateManyMutationInput {
  content?: Maybe<String>;
  pid?: Maybe<Int>;
  article_id?: Maybe<Int>;
  from_user_id?: Maybe<String>;
}

export interface MemberEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MemberEntityWhereInput>;
  AND?: Maybe<
    MemberEntitySubscriptionWhereInput[] | MemberEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    MemberEntitySubscriptionWhereInput[] | MemberEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    MemberEntitySubscriptionWhereInput[] | MemberEntitySubscriptionWhereInput
  >;
}

export interface ArticleCommentEntityUpdateInput {
  content?: Maybe<String>;
  pid?: Maybe<Int>;
  article_id?: Maybe<Int>;
  from_user_id?: Maybe<String>;
}

export interface ArticleEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleEntityWhereInput>;
  AND?: Maybe<
    ArticleEntitySubscriptionWhereInput[] | ArticleEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    ArticleEntitySubscriptionWhereInput[] | ArticleEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    ArticleEntitySubscriptionWhereInput[] | ArticleEntitySubscriptionWhereInput
  >;
}

export interface ArticleCommentEntityCreateInput {
  article_comment_id?: Maybe<Int>;
  content: String;
  pid: Int;
  article_id: Int;
  from_user_id: String;
}

export type ArticleCommentEntityWhereUniqueInput = AtLeastOne<{
  article_comment_id: Maybe<Int>;
}>;

export interface ArticleCategoryEntityUpdateManyMutationInput {
  title?: Maybe<String>;
  name?: Maybe<String>;
  icon?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ArticleCommentEntityWhereInput {
  article_comment_id?: Maybe<Int>;
  article_comment_id_not?: Maybe<Int>;
  article_comment_id_in?: Maybe<Int[] | Int>;
  article_comment_id_not_in?: Maybe<Int[] | Int>;
  article_comment_id_lt?: Maybe<Int>;
  article_comment_id_lte?: Maybe<Int>;
  article_comment_id_gt?: Maybe<Int>;
  article_comment_id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  article_id?: Maybe<Int>;
  article_id_not?: Maybe<Int>;
  article_id_in?: Maybe<Int[] | Int>;
  article_id_not_in?: Maybe<Int[] | Int>;
  article_id_lt?: Maybe<Int>;
  article_id_lte?: Maybe<Int>;
  article_id_gt?: Maybe<Int>;
  article_id_gte?: Maybe<Int>;
  from_user_id?: Maybe<String>;
  from_user_id_not?: Maybe<String>;
  from_user_id_in?: Maybe<String[] | String>;
  from_user_id_not_in?: Maybe<String[] | String>;
  from_user_id_lt?: Maybe<String>;
  from_user_id_lte?: Maybe<String>;
  from_user_id_gt?: Maybe<String>;
  from_user_id_gte?: Maybe<String>;
  from_user_id_contains?: Maybe<String>;
  from_user_id_not_contains?: Maybe<String>;
  from_user_id_starts_with?: Maybe<String>;
  from_user_id_not_starts_with?: Maybe<String>;
  from_user_id_ends_with?: Maybe<String>;
  from_user_id_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ArticleCommentEntityWhereInput[] | ArticleCommentEntityWhereInput
  >;
  OR?: Maybe<ArticleCommentEntityWhereInput[] | ArticleCommentEntityWhereInput>;
  NOT?: Maybe<
    ArticleCommentEntityWhereInput[] | ArticleCommentEntityWhereInput
  >;
}

export type UserRoleEntityWhereUniqueInput = AtLeastOne<{
  user_role_id: Maybe<Int>;
}>;

export interface AddonPermissionEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddonPermissionEntityWhereInput>;
  AND?: Maybe<
    | AddonPermissionEntitySubscriptionWhereInput[]
    | AddonPermissionEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | AddonPermissionEntitySubscriptionWhereInput[]
    | AddonPermissionEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | AddonPermissionEntitySubscriptionWhereInput[]
    | AddonPermissionEntitySubscriptionWhereInput
  >;
}

export interface ArticleCategoryEntityUpdateInput {
  title?: Maybe<String>;
  name?: Maybe<String>;
  icon?: Maybe<String>;
  description?: Maybe<String>;
}

export interface AccessTokenEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccessTokenEntityWhereInput>;
  AND?: Maybe<
    | AccessTokenEntitySubscriptionWhereInput[]
    | AccessTokenEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | AccessTokenEntitySubscriptionWhereInput[]
    | AccessTokenEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | AccessTokenEntitySubscriptionWhereInput[]
    | AccessTokenEntitySubscriptionWhereInput
  >;
}

export interface UserRoleEntityWhereInput {
  user_role_id?: Maybe<Int>;
  user_role_id_not?: Maybe<Int>;
  user_role_id_in?: Maybe<Int[] | Int>;
  user_role_id_not_in?: Maybe<Int[] | Int>;
  user_role_id_lt?: Maybe<Int>;
  user_role_id_lte?: Maybe<Int>;
  user_role_id_gt?: Maybe<Int>;
  user_role_id_gte?: Maybe<Int>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  role_id?: Maybe<Int>;
  role_id_not?: Maybe<Int>;
  role_id_in?: Maybe<Int[] | Int>;
  role_id_not_in?: Maybe<Int[] | Int>;
  role_id_lt?: Maybe<Int>;
  role_id_lte?: Maybe<Int>;
  role_id_gt?: Maybe<Int>;
  role_id_gte?: Maybe<Int>;
  AND?: Maybe<UserRoleEntityWhereInput[] | UserRoleEntityWhereInput>;
  OR?: Maybe<UserRoleEntityWhereInput[] | UserRoleEntityWhereInput>;
  NOT?: Maybe<UserRoleEntityWhereInput[] | UserRoleEntityWhereInput>;
}

export interface UserRoleEntityUpdateManyMutationInput {
  openid?: Maybe<String>;
  role_id?: Maybe<Int>;
}

export interface ArticleCategoryEntityCreateInput {
  article_category_id?: Maybe<Int>;
  title: String;
  name: String;
  icon: String;
  description: String;
}

export interface UserRoleEntityUpdateInput {
  openid?: Maybe<String>;
  role_id?: Maybe<Int>;
}

export interface AddonPermissionEntityUpdateManyMutationInput {
  addon_id?: Maybe<Int>;
  permission_id?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
}

export interface UserOrganizationEntityUpdateManyMutationInput {
  openid?: Maybe<String>;
  orgainization_id?: Maybe<Int>;
}

export interface AddonPermissionEntityUpdateInput {
  addon_id?: Maybe<Int>;
  permission_id?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
}

export type LoggerEntityWhereUniqueInput = AtLeastOne<{
  logger_id: Maybe<Int>;
}>;

export interface AddonPermissionEntityCreateInput {
  addon_permission_id?: Maybe<Int>;
  addon_id: Int;
  permission_id: Int;
  create_time: DateTimeInput;
  update_time: DateTimeInput;
}

export interface LoggerEntityWhereInput {
  logger_id?: Maybe<Int>;
  logger_id_not?: Maybe<Int>;
  logger_id_in?: Maybe<Int[] | Int>;
  logger_id_not_in?: Maybe<Int[] | Int>;
  logger_id_lt?: Maybe<Int>;
  logger_id_lte?: Maybe<Int>;
  logger_id_gt?: Maybe<Int>;
  logger_id_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  start_time_not?: Maybe<DateTimeInput>;
  start_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_lt?: Maybe<DateTimeInput>;
  start_time_lte?: Maybe<DateTimeInput>;
  start_time_gt?: Maybe<DateTimeInput>;
  start_time_gte?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  end_time_not?: Maybe<DateTimeInput>;
  end_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_lt?: Maybe<DateTimeInput>;
  end_time_lte?: Maybe<DateTimeInput>;
  end_time_gt?: Maybe<DateTimeInput>;
  end_time_gte?: Maybe<DateTimeInput>;
  params?: Maybe<String>;
  params_not?: Maybe<String>;
  params_in?: Maybe<String[] | String>;
  params_not_in?: Maybe<String[] | String>;
  params_lt?: Maybe<String>;
  params_lte?: Maybe<String>;
  params_gt?: Maybe<String>;
  params_gte?: Maybe<String>;
  params_contains?: Maybe<String>;
  params_not_contains?: Maybe<String>;
  params_starts_with?: Maybe<String>;
  params_not_starts_with?: Maybe<String>;
  params_ends_with?: Maybe<String>;
  params_not_ends_with?: Maybe<String>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  result?: Maybe<String>;
  result_not?: Maybe<String>;
  result_in?: Maybe<String[] | String>;
  result_not_in?: Maybe<String[] | String>;
  result_lt?: Maybe<String>;
  result_lte?: Maybe<String>;
  result_gt?: Maybe<String>;
  result_gte?: Maybe<String>;
  result_contains?: Maybe<String>;
  result_not_contains?: Maybe<String>;
  result_starts_with?: Maybe<String>;
  result_not_starts_with?: Maybe<String>;
  result_ends_with?: Maybe<String>;
  result_not_ends_with?: Maybe<String>;
  permissions?: Maybe<String>;
  permissions_not?: Maybe<String>;
  permissions_in?: Maybe<String[] | String>;
  permissions_not_in?: Maybe<String[] | String>;
  permissions_lt?: Maybe<String>;
  permissions_lte?: Maybe<String>;
  permissions_gt?: Maybe<String>;
  permissions_gte?: Maybe<String>;
  permissions_contains?: Maybe<String>;
  permissions_not_contains?: Maybe<String>;
  permissions_starts_with?: Maybe<String>;
  permissions_not_starts_with?: Maybe<String>;
  permissions_ends_with?: Maybe<String>;
  permissions_not_ends_with?: Maybe<String>;
  AND?: Maybe<LoggerEntityWhereInput[] | LoggerEntityWhereInput>;
  OR?: Maybe<LoggerEntityWhereInput[] | LoggerEntityWhereInput>;
  NOT?: Maybe<LoggerEntityWhereInput[] | LoggerEntityWhereInput>;
}

export interface AddonEntityUpdateManyMutationInput {
  pid?: Maybe<Int>;
  appsecret?: Maybe<String>;
  icon?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<Int>;
}

export interface PermissionEntityUpsertWithWhereUniqueWithoutUsersInput {
  where: PermissionEntityWhereUniqueInput;
  update: PermissionEntityUpdateWithoutUsersDataInput;
  create: PermissionEntityCreateWithoutUsersInput;
}

export interface PermissionEntityUpdateWithWhereUniqueWithoutUsersInput {
  where: PermissionEntityWhereUniqueInput;
  data: PermissionEntityUpdateWithoutUsersDataInput;
}

export interface PermissionEntityUpdateManyWithoutUsersInput {
  create?: Maybe<
    | PermissionEntityCreateWithoutUsersInput[]
    | PermissionEntityCreateWithoutUsersInput
  >;
  delete?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  connect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  set?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  disconnect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  update?: Maybe<
    | PermissionEntityUpdateWithWhereUniqueWithoutUsersInput[]
    | PermissionEntityUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | PermissionEntityUpsertWithWhereUniqueWithoutUsersInput[]
    | PermissionEntityUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<
    PermissionEntityScalarWhereInput[] | PermissionEntityScalarWhereInput
  >;
  updateMany?: Maybe<
    | PermissionEntityUpdateManyWithWhereNestedInput[]
    | PermissionEntityUpdateManyWithWhereNestedInput
  >;
}

export interface AccessTokenEntityCreateInput {
  access_token_id?: Maybe<Int>;
  access_token: String;
  openid: String;
  appid: String;
  ip: String;
  platform: String;
  grant_type: Int;
  scope: String;
  expires_in: DateTimeInput;
  status: Int;
  refreshToken: RefreshTokenEntityCreateOneWithoutTokenInput;
}

export interface UserEntityUpdateInput {
  openid?: Maybe<String>;
  unionid?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  salt?: Maybe<String>;
  realname?: Maybe<String>;
  nickname?: Maybe<String>;
  avatar?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  sex?: Maybe<Int>;
  permissions?: Maybe<PermissionEntityUpdateManyWithoutUsersInput>;
  roles?: Maybe<RoleEntityUpdateManyInput>;
  organizations?: Maybe<OrganizationEntityUpdateManyInput>;
}

export interface RefreshTokenEntityCreateOneWithoutTokenInput {
  create?: Maybe<RefreshTokenEntityCreateWithoutTokenInput>;
  connect?: Maybe<RefreshTokenEntityWhereUniqueInput>;
}

export interface PermissionEntityCreateManyWithoutUsersInput {
  create?: Maybe<
    | PermissionEntityCreateWithoutUsersInput[]
    | PermissionEntityCreateWithoutUsersInput
  >;
  connect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
}

export interface RefreshTokenEntityCreateWithoutTokenInput {
  refresh_token_id?: Maybe<Int>;
  refresh_token: String;
  expires_in: DateTimeInput;
}

export type MessageEntityWhereUniqueInput = AtLeastOne<{
  msg_id: Maybe<Int>;
}>;

export interface AccessTokenEntityUpdateInput {
  access_token?: Maybe<String>;
  openid?: Maybe<String>;
  appid?: Maybe<String>;
  ip?: Maybe<String>;
  platform?: Maybe<String>;
  grant_type?: Maybe<Int>;
  scope?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
  refreshToken?: Maybe<RefreshTokenEntityUpdateOneRequiredWithoutTokenInput>;
}

export interface MessageEntityWhereInput {
  msg_id?: Maybe<Int>;
  msg_id_not?: Maybe<Int>;
  msg_id_in?: Maybe<Int[] | Int>;
  msg_id_not_in?: Maybe<Int[] | Int>;
  msg_id_lt?: Maybe<Int>;
  msg_id_lte?: Maybe<Int>;
  msg_id_gt?: Maybe<Int>;
  msg_id_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  msg_type?: Maybe<Int>;
  msg_type_not?: Maybe<Int>;
  msg_type_in?: Maybe<Int[] | Int>;
  msg_type_not_in?: Maybe<Int[] | Int>;
  msg_type_lt?: Maybe<Int>;
  msg_type_lte?: Maybe<Int>;
  msg_type_gt?: Maybe<Int>;
  msg_type_gte?: Maybe<Int>;
  pic_url?: Maybe<String>;
  pic_url_not?: Maybe<String>;
  pic_url_in?: Maybe<String[] | String>;
  pic_url_not_in?: Maybe<String[] | String>;
  pic_url_lt?: Maybe<String>;
  pic_url_lte?: Maybe<String>;
  pic_url_gt?: Maybe<String>;
  pic_url_gte?: Maybe<String>;
  pic_url_contains?: Maybe<String>;
  pic_url_not_contains?: Maybe<String>;
  pic_url_starts_with?: Maybe<String>;
  pic_url_not_starts_with?: Maybe<String>;
  pic_url_ends_with?: Maybe<String>;
  pic_url_not_ends_with?: Maybe<String>;
  media_id?: Maybe<Int>;
  media_id_not?: Maybe<Int>;
  media_id_in?: Maybe<Int[] | Int>;
  media_id_not_in?: Maybe<Int[] | Int>;
  media_id_lt?: Maybe<Int>;
  media_id_lte?: Maybe<Int>;
  media_id_gt?: Maybe<Int>;
  media_id_gte?: Maybe<Int>;
  thumb_media_id?: Maybe<Int>;
  thumb_media_id_not?: Maybe<Int>;
  thumb_media_id_in?: Maybe<Int[] | Int>;
  thumb_media_id_not_in?: Maybe<Int[] | Int>;
  thumb_media_id_lt?: Maybe<Int>;
  thumb_media_id_lte?: Maybe<Int>;
  thumb_media_id_gt?: Maybe<Int>;
  thumb_media_id_gte?: Maybe<Int>;
  location_x?: Maybe<String>;
  location_x_not?: Maybe<String>;
  location_x_in?: Maybe<String[] | String>;
  location_x_not_in?: Maybe<String[] | String>;
  location_x_lt?: Maybe<String>;
  location_x_lte?: Maybe<String>;
  location_x_gt?: Maybe<String>;
  location_x_gte?: Maybe<String>;
  location_x_contains?: Maybe<String>;
  location_x_not_contains?: Maybe<String>;
  location_x_starts_with?: Maybe<String>;
  location_x_not_starts_with?: Maybe<String>;
  location_x_ends_with?: Maybe<String>;
  location_x_not_ends_with?: Maybe<String>;
  location_y?: Maybe<String>;
  location_y_not?: Maybe<String>;
  location_y_in?: Maybe<String[] | String>;
  location_y_not_in?: Maybe<String[] | String>;
  location_y_lt?: Maybe<String>;
  location_y_lte?: Maybe<String>;
  location_y_gt?: Maybe<String>;
  location_y_gte?: Maybe<String>;
  location_y_contains?: Maybe<String>;
  location_y_not_contains?: Maybe<String>;
  location_y_starts_with?: Maybe<String>;
  location_y_not_starts_with?: Maybe<String>;
  location_y_ends_with?: Maybe<String>;
  location_y_not_ends_with?: Maybe<String>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  from_user?: Maybe<String>;
  from_user_not?: Maybe<String>;
  from_user_in?: Maybe<String[] | String>;
  from_user_not_in?: Maybe<String[] | String>;
  from_user_lt?: Maybe<String>;
  from_user_lte?: Maybe<String>;
  from_user_gt?: Maybe<String>;
  from_user_gte?: Maybe<String>;
  from_user_contains?: Maybe<String>;
  from_user_not_contains?: Maybe<String>;
  from_user_starts_with?: Maybe<String>;
  from_user_not_starts_with?: Maybe<String>;
  from_user_ends_with?: Maybe<String>;
  from_user_not_ends_with?: Maybe<String>;
  to_user?: Maybe<String>;
  to_user_not?: Maybe<String>;
  to_user_in?: Maybe<String[] | String>;
  to_user_not_in?: Maybe<String[] | String>;
  to_user_lt?: Maybe<String>;
  to_user_lte?: Maybe<String>;
  to_user_gt?: Maybe<String>;
  to_user_gte?: Maybe<String>;
  to_user_contains?: Maybe<String>;
  to_user_not_contains?: Maybe<String>;
  to_user_starts_with?: Maybe<String>;
  to_user_not_starts_with?: Maybe<String>;
  to_user_ends_with?: Maybe<String>;
  to_user_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageEntityWhereInput[] | MessageEntityWhereInput>;
  OR?: Maybe<MessageEntityWhereInput[] | MessageEntityWhereInput>;
  NOT?: Maybe<MessageEntityWhereInput[] | MessageEntityWhereInput>;
}

export interface RefreshTokenEntityUpdateOneRequiredWithoutTokenInput {
  create?: Maybe<RefreshTokenEntityCreateWithoutTokenInput>;
  update?: Maybe<RefreshTokenEntityUpdateWithoutTokenDataInput>;
  upsert?: Maybe<RefreshTokenEntityUpsertWithoutTokenInput>;
  connect?: Maybe<RefreshTokenEntityWhereUniqueInput>;
}

export interface RolePermissionEntityCreateInput {
  role_permission_id?: Maybe<Int>;
  role_id: Int;
  permission_id: Int;
}

export interface RefreshTokenEntityUpdateWithoutTokenDataInput {
  refresh_token?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
}

export interface RoleEntityUpdateInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  permissions?: Maybe<PermissionEntityUpdateManyWithoutRolesInput>;
}

export interface RefreshTokenEntityUpsertWithoutTokenInput {
  update: RefreshTokenEntityUpdateWithoutTokenDataInput;
  create: RefreshTokenEntityCreateWithoutTokenInput;
}

export interface RefreshTokenEntityUpdateManyMutationInput {
  refresh_token?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
}

export interface AccessTokenEntityUpdateManyMutationInput {
  access_token?: Maybe<String>;
  openid?: Maybe<String>;
  appid?: Maybe<String>;
  ip?: Maybe<String>;
  platform?: Maybe<String>;
  grant_type?: Maybe<Int>;
  scope?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
}

export interface AccessTokenEntityUpdateWithoutRefreshTokenDataInput {
  access_token?: Maybe<String>;
  openid?: Maybe<String>;
  appid?: Maybe<String>;
  ip?: Maybe<String>;
  platform?: Maybe<String>;
  grant_type?: Maybe<Int>;
  scope?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
}

export interface PermissionEntityUpsertWithWhereUniqueNestedInput {
  where: PermissionEntityWhereUniqueInput;
  update: PermissionEntityUpdateDataInput;
  create: PermissionEntityCreateInput;
}

export interface AccessTokenEntityUpdateOneRequiredWithoutRefreshTokenInput {
  create?: Maybe<AccessTokenEntityCreateWithoutRefreshTokenInput>;
  update?: Maybe<AccessTokenEntityUpdateWithoutRefreshTokenDataInput>;
  upsert?: Maybe<AccessTokenEntityUpsertWithoutRefreshTokenInput>;
  connect?: Maybe<AccessTokenEntityWhereUniqueInput>;
}

export interface RoleEntityUpsertWithWhereUniqueWithoutPermissionsInput {
  where: RoleEntityWhereUniqueInput;
  update: RoleEntityUpdateWithoutPermissionsDataInput;
  create: RoleEntityCreateWithoutPermissionsInput;
}

export interface AccessTokenEntityCreateWithoutRefreshTokenInput {
  access_token_id?: Maybe<Int>;
  access_token: String;
  openid: String;
  appid: String;
  ip: String;
  platform: String;
  grant_type: Int;
  scope: String;
  expires_in: DateTimeInput;
  status: Int;
}

export interface AddonEntityCreateInput {
  appid?: Maybe<Int>;
  pid: Int;
  appsecret: String;
  icon: String;
  name: String;
  title: String;
  description: String;
  status: Int;
  permissions?: Maybe<PermissionEntityCreateManyInput>;
}

export interface AccessTokenEntityCreateOneWithoutRefreshTokenInput {
  create?: Maybe<AccessTokenEntityCreateWithoutRefreshTokenInput>;
  connect?: Maybe<AccessTokenEntityWhereUniqueInput>;
}

export interface PermissionEntityCreateManyInput {
  create?: Maybe<PermissionEntityCreateInput[] | PermissionEntityCreateInput>;
  connect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
}

export interface RefreshTokenEntityCreateInput {
  refresh_token_id?: Maybe<Int>;
  token: AccessTokenEntityCreateOneWithoutRefreshTokenInput;
  refresh_token: String;
  expires_in: DateTimeInput;
}

export interface PermissionEntityCreateInput {
  father_name: String;
  name: String;
  title: String;
  decription: String;
  value?: Maybe<PermissionEntityCreatevalueInput>;
  icon: String;
  status: Int;
  displayorder: Int;
  fromAddon: AddonEntityCreateOneInput;
  addons?: Maybe<AddonEntityCreateManyInput>;
  users?: Maybe<UserEntityCreateManyWithoutPermissionsInput>;
  roles?: Maybe<RoleEntityCreateManyWithoutPermissionsInput>;
}

export interface PostEntityUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<Int>;
  handler_user?: Maybe<String>;
}

export interface PermissionEntityCreatevalueInput {
  set?: Maybe<String[] | String>;
}

export type PostEntityWhereUniqueInput = AtLeastOne<{
  post_id: Maybe<Int>;
}>;

export interface AddonEntityCreateOneInput {
  create?: Maybe<AddonEntityCreateInput>;
  connect?: Maybe<AddonEntityWhereUniqueInput>;
}

export interface PostEntityWhereInput {
  post_id?: Maybe<Int>;
  post_id_not?: Maybe<Int>;
  post_id_in?: Maybe<Int[] | Int>;
  post_id_not_in?: Maybe<Int[] | Int>;
  post_id_lt?: Maybe<Int>;
  post_id_lte?: Maybe<Int>;
  post_id_gt?: Maybe<Int>;
  post_id_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  handler_user?: Maybe<String>;
  handler_user_not?: Maybe<String>;
  handler_user_in?: Maybe<String[] | String>;
  handler_user_not_in?: Maybe<String[] | String>;
  handler_user_lt?: Maybe<String>;
  handler_user_lte?: Maybe<String>;
  handler_user_gt?: Maybe<String>;
  handler_user_gte?: Maybe<String>;
  handler_user_contains?: Maybe<String>;
  handler_user_not_contains?: Maybe<String>;
  handler_user_starts_with?: Maybe<String>;
  handler_user_not_starts_with?: Maybe<String>;
  handler_user_ends_with?: Maybe<String>;
  handler_user_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostEntityWhereInput[] | PostEntityWhereInput>;
  OR?: Maybe<PostEntityWhereInput[] | PostEntityWhereInput>;
  NOT?: Maybe<PostEntityWhereInput[] | PostEntityWhereInput>;
}

export interface AddonEntityCreateManyInput {
  create?: Maybe<AddonEntityCreateInput[] | AddonEntityCreateInput>;
  connect?: Maybe<AddonEntityWhereUniqueInput[] | AddonEntityWhereUniqueInput>;
}

export interface PostCategoryEntityUpdateInput {
  title?: Maybe<String>;
  icon?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserEntityCreateManyWithoutPermissionsInput {
  create?: Maybe<
    | UserEntityCreateWithoutPermissionsInput[]
    | UserEntityCreateWithoutPermissionsInput
  >;
  connect?: Maybe<UserEntityWhereUniqueInput[] | UserEntityWhereUniqueInput>;
}

export interface PermissionEntityUpdateManyMutationInput {
  father_name?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  decription?: Maybe<String>;
  value?: Maybe<PermissionEntityUpdatevalueInput>;
  icon?: Maybe<String>;
  status?: Maybe<Int>;
  displayorder?: Maybe<Int>;
}

export interface UserEntityCreateWithoutPermissionsInput {
  user_id?: Maybe<Int>;
  openid: String;
  unionid: String;
  username: String;
  password: String;
  salt: String;
  realname: String;
  nickname: String;
  avatar: String;
  phone: String;
  email: String;
  sex: Int;
  roles?: Maybe<RoleEntityCreateManyInput>;
  organizations?: Maybe<OrganizationEntityCreateManyInput>;
}

export interface AccessTokenEntityWhereInput {
  access_token_id?: Maybe<Int>;
  access_token_id_not?: Maybe<Int>;
  access_token_id_in?: Maybe<Int[] | Int>;
  access_token_id_not_in?: Maybe<Int[] | Int>;
  access_token_id_lt?: Maybe<Int>;
  access_token_id_lte?: Maybe<Int>;
  access_token_id_gt?: Maybe<Int>;
  access_token_id_gte?: Maybe<Int>;
  access_token?: Maybe<String>;
  access_token_not?: Maybe<String>;
  access_token_in?: Maybe<String[] | String>;
  access_token_not_in?: Maybe<String[] | String>;
  access_token_lt?: Maybe<String>;
  access_token_lte?: Maybe<String>;
  access_token_gt?: Maybe<String>;
  access_token_gte?: Maybe<String>;
  access_token_contains?: Maybe<String>;
  access_token_not_contains?: Maybe<String>;
  access_token_starts_with?: Maybe<String>;
  access_token_not_starts_with?: Maybe<String>;
  access_token_ends_with?: Maybe<String>;
  access_token_not_ends_with?: Maybe<String>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  appid?: Maybe<String>;
  appid_not?: Maybe<String>;
  appid_in?: Maybe<String[] | String>;
  appid_not_in?: Maybe<String[] | String>;
  appid_lt?: Maybe<String>;
  appid_lte?: Maybe<String>;
  appid_gt?: Maybe<String>;
  appid_gte?: Maybe<String>;
  appid_contains?: Maybe<String>;
  appid_not_contains?: Maybe<String>;
  appid_starts_with?: Maybe<String>;
  appid_not_starts_with?: Maybe<String>;
  appid_ends_with?: Maybe<String>;
  appid_not_ends_with?: Maybe<String>;
  ip?: Maybe<String>;
  ip_not?: Maybe<String>;
  ip_in?: Maybe<String[] | String>;
  ip_not_in?: Maybe<String[] | String>;
  ip_lt?: Maybe<String>;
  ip_lte?: Maybe<String>;
  ip_gt?: Maybe<String>;
  ip_gte?: Maybe<String>;
  ip_contains?: Maybe<String>;
  ip_not_contains?: Maybe<String>;
  ip_starts_with?: Maybe<String>;
  ip_not_starts_with?: Maybe<String>;
  ip_ends_with?: Maybe<String>;
  ip_not_ends_with?: Maybe<String>;
  platform?: Maybe<String>;
  platform_not?: Maybe<String>;
  platform_in?: Maybe<String[] | String>;
  platform_not_in?: Maybe<String[] | String>;
  platform_lt?: Maybe<String>;
  platform_lte?: Maybe<String>;
  platform_gt?: Maybe<String>;
  platform_gte?: Maybe<String>;
  platform_contains?: Maybe<String>;
  platform_not_contains?: Maybe<String>;
  platform_starts_with?: Maybe<String>;
  platform_not_starts_with?: Maybe<String>;
  platform_ends_with?: Maybe<String>;
  platform_not_ends_with?: Maybe<String>;
  grant_type?: Maybe<Int>;
  grant_type_not?: Maybe<Int>;
  grant_type_in?: Maybe<Int[] | Int>;
  grant_type_not_in?: Maybe<Int[] | Int>;
  grant_type_lt?: Maybe<Int>;
  grant_type_lte?: Maybe<Int>;
  grant_type_gt?: Maybe<Int>;
  grant_type_gte?: Maybe<Int>;
  scope?: Maybe<String>;
  scope_not?: Maybe<String>;
  scope_in?: Maybe<String[] | String>;
  scope_not_in?: Maybe<String[] | String>;
  scope_lt?: Maybe<String>;
  scope_lte?: Maybe<String>;
  scope_gt?: Maybe<String>;
  scope_gte?: Maybe<String>;
  scope_contains?: Maybe<String>;
  scope_not_contains?: Maybe<String>;
  scope_starts_with?: Maybe<String>;
  scope_not_starts_with?: Maybe<String>;
  scope_ends_with?: Maybe<String>;
  scope_not_ends_with?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
  expires_in_not?: Maybe<DateTimeInput>;
  expires_in_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_in_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_in_lt?: Maybe<DateTimeInput>;
  expires_in_lte?: Maybe<DateTimeInput>;
  expires_in_gt?: Maybe<DateTimeInput>;
  expires_in_gte?: Maybe<DateTimeInput>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  refreshToken?: Maybe<RefreshTokenEntityWhereInput>;
  AND?: Maybe<AccessTokenEntityWhereInput[] | AccessTokenEntityWhereInput>;
  OR?: Maybe<AccessTokenEntityWhereInput[] | AccessTokenEntityWhereInput>;
  NOT?: Maybe<AccessTokenEntityWhereInput[] | AccessTokenEntityWhereInput>;
}

export interface RoleEntityCreateManyInput {
  create?: Maybe<RoleEntityCreateInput[] | RoleEntityCreateInput>;
  connect?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
}

export interface OrganizationEntityUpdateManyMutationInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  displayorder?: Maybe<Int>;
}

export interface RoleEntityCreateInput {
  role_id?: Maybe<Int>;
  name: String;
  title: String;
  description: String;
  permissions?: Maybe<PermissionEntityCreateManyWithoutRolesInput>;
}

export type RoleEntityWhereUniqueInput = AtLeastOne<{
  role_id: Maybe<Int>;
}>;

export interface PermissionEntityCreateManyWithoutRolesInput {
  create?: Maybe<
    | PermissionEntityCreateWithoutRolesInput[]
    | PermissionEntityCreateWithoutRolesInput
  >;
  connect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
}

export interface MessageEntityUpdateInput {
  content?: Maybe<String>;
  msg_type?: Maybe<Int>;
  pic_url?: Maybe<String>;
  media_id?: Maybe<Int>;
  thumb_media_id?: Maybe<Int>;
  location_x?: Maybe<String>;
  location_y?: Maybe<String>;
  label?: Maybe<String>;
  title?: Maybe<String>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  from_user?: Maybe<String>;
  to_user?: Maybe<String>;
}

export interface PermissionEntityCreateWithoutRolesInput {
  father_name: String;
  name: String;
  title: String;
  decription: String;
  value?: Maybe<PermissionEntityCreatevalueInput>;
  icon: String;
  status: Int;
  displayorder: Int;
  fromAddon: AddonEntityCreateOneInput;
  addons?: Maybe<AddonEntityCreateManyInput>;
  users?: Maybe<UserEntityCreateManyWithoutPermissionsInput>;
}

export type RolePermissionEntityWhereUniqueInput = AtLeastOne<{
  role_permission_id: Maybe<Int>;
}>;

export interface OrganizationEntityCreateManyInput {
  create?: Maybe<
    OrganizationEntityCreateInput[] | OrganizationEntityCreateInput
  >;
  connect?: Maybe<
    OrganizationEntityWhereUniqueInput[] | OrganizationEntityWhereUniqueInput
  >;
}

export interface RolePermissionEntityWhereInput {
  role_permission_id?: Maybe<Int>;
  role_permission_id_not?: Maybe<Int>;
  role_permission_id_in?: Maybe<Int[] | Int>;
  role_permission_id_not_in?: Maybe<Int[] | Int>;
  role_permission_id_lt?: Maybe<Int>;
  role_permission_id_lte?: Maybe<Int>;
  role_permission_id_gt?: Maybe<Int>;
  role_permission_id_gte?: Maybe<Int>;
  role_id?: Maybe<Int>;
  role_id_not?: Maybe<Int>;
  role_id_in?: Maybe<Int[] | Int>;
  role_id_not_in?: Maybe<Int[] | Int>;
  role_id_lt?: Maybe<Int>;
  role_id_lte?: Maybe<Int>;
  role_id_gt?: Maybe<Int>;
  role_id_gte?: Maybe<Int>;
  permission_id?: Maybe<Int>;
  permission_id_not?: Maybe<Int>;
  permission_id_in?: Maybe<Int[] | Int>;
  permission_id_not_in?: Maybe<Int[] | Int>;
  permission_id_lt?: Maybe<Int>;
  permission_id_lte?: Maybe<Int>;
  permission_id_gt?: Maybe<Int>;
  permission_id_gte?: Maybe<Int>;
  AND?: Maybe<
    RolePermissionEntityWhereInput[] | RolePermissionEntityWhereInput
  >;
  OR?: Maybe<RolePermissionEntityWhereInput[] | RolePermissionEntityWhereInput>;
  NOT?: Maybe<
    RolePermissionEntityWhereInput[] | RolePermissionEntityWhereInput
  >;
}

export interface OrganizationEntityCreateInput {
  organization_id?: Maybe<Int>;
  name: String;
  title: String;
  description: String;
  displayorder: Int;
}

export interface UserEntityWhereInput {
  user_id?: Maybe<Int>;
  user_id_not?: Maybe<Int>;
  user_id_in?: Maybe<Int[] | Int>;
  user_id_not_in?: Maybe<Int[] | Int>;
  user_id_lt?: Maybe<Int>;
  user_id_lte?: Maybe<Int>;
  user_id_gt?: Maybe<Int>;
  user_id_gte?: Maybe<Int>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  unionid?: Maybe<String>;
  unionid_not?: Maybe<String>;
  unionid_in?: Maybe<String[] | String>;
  unionid_not_in?: Maybe<String[] | String>;
  unionid_lt?: Maybe<String>;
  unionid_lte?: Maybe<String>;
  unionid_gt?: Maybe<String>;
  unionid_gte?: Maybe<String>;
  unionid_contains?: Maybe<String>;
  unionid_not_contains?: Maybe<String>;
  unionid_starts_with?: Maybe<String>;
  unionid_not_starts_with?: Maybe<String>;
  unionid_ends_with?: Maybe<String>;
  unionid_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  salt?: Maybe<String>;
  salt_not?: Maybe<String>;
  salt_in?: Maybe<String[] | String>;
  salt_not_in?: Maybe<String[] | String>;
  salt_lt?: Maybe<String>;
  salt_lte?: Maybe<String>;
  salt_gt?: Maybe<String>;
  salt_gte?: Maybe<String>;
  salt_contains?: Maybe<String>;
  salt_not_contains?: Maybe<String>;
  salt_starts_with?: Maybe<String>;
  salt_not_starts_with?: Maybe<String>;
  salt_ends_with?: Maybe<String>;
  salt_not_ends_with?: Maybe<String>;
  realname?: Maybe<String>;
  realname_not?: Maybe<String>;
  realname_in?: Maybe<String[] | String>;
  realname_not_in?: Maybe<String[] | String>;
  realname_lt?: Maybe<String>;
  realname_lte?: Maybe<String>;
  realname_gt?: Maybe<String>;
  realname_gte?: Maybe<String>;
  realname_contains?: Maybe<String>;
  realname_not_contains?: Maybe<String>;
  realname_starts_with?: Maybe<String>;
  realname_not_starts_with?: Maybe<String>;
  realname_ends_with?: Maybe<String>;
  realname_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  sex?: Maybe<Int>;
  sex_not?: Maybe<Int>;
  sex_in?: Maybe<Int[] | Int>;
  sex_not_in?: Maybe<Int[] | Int>;
  sex_lt?: Maybe<Int>;
  sex_lte?: Maybe<Int>;
  sex_gt?: Maybe<Int>;
  sex_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  permissions_every?: Maybe<PermissionEntityWhereInput>;
  permissions_some?: Maybe<PermissionEntityWhereInput>;
  permissions_none?: Maybe<PermissionEntityWhereInput>;
  roles_every?: Maybe<RoleEntityWhereInput>;
  roles_some?: Maybe<RoleEntityWhereInput>;
  roles_none?: Maybe<RoleEntityWhereInput>;
  organizations_every?: Maybe<OrganizationEntityWhereInput>;
  organizations_some?: Maybe<OrganizationEntityWhereInput>;
  organizations_none?: Maybe<OrganizationEntityWhereInput>;
  AND?: Maybe<UserEntityWhereInput[] | UserEntityWhereInput>;
  OR?: Maybe<UserEntityWhereInput[] | UserEntityWhereInput>;
  NOT?: Maybe<UserEntityWhereInput[] | UserEntityWhereInput>;
}

export interface RoleEntityCreateManyWithoutPermissionsInput {
  create?: Maybe<
    | RoleEntityCreateWithoutPermissionsInput[]
    | RoleEntityCreateWithoutPermissionsInput
  >;
  connect?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
}

export interface RolePermissionEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RolePermissionEntityWhereInput>;
  AND?: Maybe<
    | RolePermissionEntitySubscriptionWhereInput[]
    | RolePermissionEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | RolePermissionEntitySubscriptionWhereInput[]
    | RolePermissionEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | RolePermissionEntitySubscriptionWhereInput[]
    | RolePermissionEntitySubscriptionWhereInput
  >;
}

export interface RoleEntityUpdateWithoutPermissionsDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PostEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostEntityWhereInput>;
  AND?: Maybe<
    PostEntitySubscriptionWhereInput[] | PostEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    PostEntitySubscriptionWhereInput[] | PostEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    PostEntitySubscriptionWhereInput[] | PostEntitySubscriptionWhereInput
  >;
}

export interface AddonEntityUpdateInput {
  pid?: Maybe<Int>;
  appsecret?: Maybe<String>;
  icon?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<Int>;
  permissions?: Maybe<PermissionEntityUpdateManyInput>;
}

export interface PermissionEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PermissionEntityWhereInput>;
  AND?: Maybe<
    | PermissionEntitySubscriptionWhereInput[]
    | PermissionEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | PermissionEntitySubscriptionWhereInput[]
    | PermissionEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PermissionEntitySubscriptionWhereInput[]
    | PermissionEntitySubscriptionWhereInput
  >;
}

export interface PermissionEntityUpdateManyInput {
  create?: Maybe<PermissionEntityCreateInput[] | PermissionEntityCreateInput>;
  update?: Maybe<
    | PermissionEntityUpdateWithWhereUniqueNestedInput[]
    | PermissionEntityUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PermissionEntityUpsertWithWhereUniqueNestedInput[]
    | PermissionEntityUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  connect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  set?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  disconnect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PermissionEntityScalarWhereInput[] | PermissionEntityScalarWhereInput
  >;
  updateMany?: Maybe<
    | PermissionEntityUpdateManyWithWhereNestedInput[]
    | PermissionEntityUpdateManyWithWhereNestedInput
  >;
}

export interface ArticleCategoryEntityWhereInput {
  article_category_id?: Maybe<Int>;
  article_category_id_not?: Maybe<Int>;
  article_category_id_in?: Maybe<Int[] | Int>;
  article_category_id_not_in?: Maybe<Int[] | Int>;
  article_category_id_lt?: Maybe<Int>;
  article_category_id_lte?: Maybe<Int>;
  article_category_id_gt?: Maybe<Int>;
  article_category_id_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ArticleCategoryEntityWhereInput[] | ArticleCategoryEntityWhereInput
  >;
  OR?: Maybe<
    ArticleCategoryEntityWhereInput[] | ArticleCategoryEntityWhereInput
  >;
  NOT?: Maybe<
    ArticleCategoryEntityWhereInput[] | ArticleCategoryEntityWhereInput
  >;
}

export interface PermissionEntityUpdateWithWhereUniqueNestedInput {
  where: PermissionEntityWhereUniqueInput;
  data: PermissionEntityUpdateDataInput;
}

export interface ArticleCommentEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleCommentEntityWhereInput>;
  AND?: Maybe<
    | ArticleCommentEntitySubscriptionWhereInput[]
    | ArticleCommentEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | ArticleCommentEntitySubscriptionWhereInput[]
    | ArticleCommentEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ArticleCommentEntitySubscriptionWhereInput[]
    | ArticleCommentEntitySubscriptionWhereInput
  >;
}

export interface PermissionEntityUpdateDataInput {
  father_name?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  decription?: Maybe<String>;
  value?: Maybe<PermissionEntityUpdatevalueInput>;
  icon?: Maybe<String>;
  status?: Maybe<Int>;
  displayorder?: Maybe<Int>;
  fromAddon?: Maybe<AddonEntityUpdateOneRequiredInput>;
  addons?: Maybe<AddonEntityUpdateManyInput>;
  users?: Maybe<UserEntityUpdateManyWithoutPermissionsInput>;
  roles?: Maybe<RoleEntityUpdateManyWithoutPermissionsInput>;
}

export type AddonEntityWhereUniqueInput = AtLeastOne<{
  appid: Maybe<Int>;
}>;

export interface PermissionEntityUpdatevalueInput {
  set?: Maybe<String[] | String>;
}

export type ArticleEntityWhereUniqueInput = AtLeastOne<{
  article_id: Maybe<Int>;
}>;

export interface AddonEntityUpdateOneRequiredInput {
  create?: Maybe<AddonEntityCreateInput>;
  update?: Maybe<AddonEntityUpdateDataInput>;
  upsert?: Maybe<AddonEntityUpsertNestedInput>;
  connect?: Maybe<AddonEntityWhereUniqueInput>;
}

export interface UserRoleEntityCreateInput {
  user_role_id?: Maybe<Int>;
  openid: String;
  role_id: Int;
}

export interface AddonEntityUpdateDataInput {
  pid?: Maybe<Int>;
  appsecret?: Maybe<String>;
  icon?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<Int>;
  permissions?: Maybe<PermissionEntityUpdateManyInput>;
}

export interface UserOrganizationEntityCreateInput {
  user_orgainization_id?: Maybe<Int>;
  openid: String;
  orgainization_id: Int;
}

export interface AddonEntityUpsertNestedInput {
  update: AddonEntityUpdateDataInput;
  create: AddonEntityCreateInput;
}

export interface PermissionEntityUpdateWithoutUsersDataInput {
  father_name?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  decription?: Maybe<String>;
  value?: Maybe<PermissionEntityUpdatevalueInput>;
  icon?: Maybe<String>;
  status?: Maybe<Int>;
  displayorder?: Maybe<Int>;
  fromAddon?: Maybe<AddonEntityUpdateOneRequiredInput>;
  addons?: Maybe<AddonEntityUpdateManyInput>;
  roles?: Maybe<RoleEntityUpdateManyWithoutPermissionsInput>;
}

export interface AddonEntityUpdateManyInput {
  create?: Maybe<AddonEntityCreateInput[] | AddonEntityCreateInput>;
  update?: Maybe<
    | AddonEntityUpdateWithWhereUniqueNestedInput[]
    | AddonEntityUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AddonEntityUpsertWithWhereUniqueNestedInput[]
    | AddonEntityUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AddonEntityWhereUniqueInput[] | AddonEntityWhereUniqueInput>;
  connect?: Maybe<AddonEntityWhereUniqueInput[] | AddonEntityWhereUniqueInput>;
  set?: Maybe<AddonEntityWhereUniqueInput[] | AddonEntityWhereUniqueInput>;
  disconnect?: Maybe<
    AddonEntityWhereUniqueInput[] | AddonEntityWhereUniqueInput
  >;
  deleteMany?: Maybe<
    AddonEntityScalarWhereInput[] | AddonEntityScalarWhereInput
  >;
  updateMany?: Maybe<
    | AddonEntityUpdateManyWithWhereNestedInput[]
    | AddonEntityUpdateManyWithWhereNestedInput
  >;
}

export interface MemberEntityWhereInput {
  member_id?: Maybe<Int>;
  member_id_not?: Maybe<Int>;
  member_id_in?: Maybe<Int[] | Int>;
  member_id_not_in?: Maybe<Int[] | Int>;
  member_id_lt?: Maybe<Int>;
  member_id_lte?: Maybe<Int>;
  member_id_gt?: Maybe<Int>;
  member_id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  realname?: Maybe<String>;
  realname_not?: Maybe<String>;
  realname_in?: Maybe<String[] | String>;
  realname_not_in?: Maybe<String[] | String>;
  realname_lt?: Maybe<String>;
  realname_lte?: Maybe<String>;
  realname_gt?: Maybe<String>;
  realname_gte?: Maybe<String>;
  realname_contains?: Maybe<String>;
  realname_not_contains?: Maybe<String>;
  realname_starts_with?: Maybe<String>;
  realname_not_starts_with?: Maybe<String>;
  realname_ends_with?: Maybe<String>;
  realname_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  salt?: Maybe<String>;
  salt_not?: Maybe<String>;
  salt_in?: Maybe<String[] | String>;
  salt_not_in?: Maybe<String[] | String>;
  salt_lt?: Maybe<String>;
  salt_lte?: Maybe<String>;
  salt_gt?: Maybe<String>;
  salt_gte?: Maybe<String>;
  salt_contains?: Maybe<String>;
  salt_not_contains?: Maybe<String>;
  salt_starts_with?: Maybe<String>;
  salt_not_starts_with?: Maybe<String>;
  salt_ends_with?: Maybe<String>;
  salt_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MemberEntityWhereInput[] | MemberEntityWhereInput>;
  OR?: Maybe<MemberEntityWhereInput[] | MemberEntityWhereInput>;
  NOT?: Maybe<MemberEntityWhereInput[] | MemberEntityWhereInput>;
}

export interface AddonEntityUpdateWithWhereUniqueNestedInput {
  where: AddonEntityWhereUniqueInput;
  data: AddonEntityUpdateDataInput;
}

export interface UserEntityCreateInput {
  user_id?: Maybe<Int>;
  openid: String;
  unionid: String;
  username: String;
  password: String;
  salt: String;
  realname: String;
  nickname: String;
  avatar: String;
  phone: String;
  email: String;
  sex: Int;
  permissions?: Maybe<PermissionEntityCreateManyWithoutUsersInput>;
  roles?: Maybe<RoleEntityCreateManyInput>;
  organizations?: Maybe<OrganizationEntityCreateManyInput>;
}

export interface OrganizationEntityWhereInput {
  organization_id?: Maybe<Int>;
  organization_id_not?: Maybe<Int>;
  organization_id_in?: Maybe<Int[] | Int>;
  organization_id_not_in?: Maybe<Int[] | Int>;
  organization_id_lt?: Maybe<Int>;
  organization_id_lte?: Maybe<Int>;
  organization_id_gt?: Maybe<Int>;
  organization_id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  displayorder?: Maybe<Int>;
  displayorder_not?: Maybe<Int>;
  displayorder_in?: Maybe<Int[] | Int>;
  displayorder_not_in?: Maybe<Int[] | Int>;
  displayorder_lt?: Maybe<Int>;
  displayorder_lte?: Maybe<Int>;
  displayorder_gt?: Maybe<Int>;
  displayorder_gte?: Maybe<Int>;
  AND?: Maybe<OrganizationEntityWhereInput[] | OrganizationEntityWhereInput>;
  OR?: Maybe<OrganizationEntityWhereInput[] | OrganizationEntityWhereInput>;
  NOT?: Maybe<OrganizationEntityWhereInput[] | OrganizationEntityWhereInput>;
}

export interface RolePermissionEntityUpdateInput {
  role_id?: Maybe<Int>;
  permission_id?: Maybe<Int>;
}

export interface AddonEntityScalarWhereInput {
  appid?: Maybe<Int>;
  appid_not?: Maybe<Int>;
  appid_in?: Maybe<Int[] | Int>;
  appid_not_in?: Maybe<Int[] | Int>;
  appid_lt?: Maybe<Int>;
  appid_lte?: Maybe<Int>;
  appid_gt?: Maybe<Int>;
  appid_gte?: Maybe<Int>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  appsecret?: Maybe<String>;
  appsecret_not?: Maybe<String>;
  appsecret_in?: Maybe<String[] | String>;
  appsecret_not_in?: Maybe<String[] | String>;
  appsecret_lt?: Maybe<String>;
  appsecret_lte?: Maybe<String>;
  appsecret_gt?: Maybe<String>;
  appsecret_gte?: Maybe<String>;
  appsecret_contains?: Maybe<String>;
  appsecret_not_contains?: Maybe<String>;
  appsecret_starts_with?: Maybe<String>;
  appsecret_not_starts_with?: Maybe<String>;
  appsecret_ends_with?: Maybe<String>;
  appsecret_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AddonEntityScalarWhereInput[] | AddonEntityScalarWhereInput>;
  OR?: Maybe<AddonEntityScalarWhereInput[] | AddonEntityScalarWhereInput>;
  NOT?: Maybe<AddonEntityScalarWhereInput[] | AddonEntityScalarWhereInput>;
}

export type OrganizationEntityWhereUniqueInput = AtLeastOne<{
  organization_id: Maybe<Int>;
}>;

export interface AddonEntityUpdateManyWithWhereNestedInput {
  where: AddonEntityScalarWhereInput;
  data: AddonEntityUpdateManyDataInput;
}

export type PermissionEntityWhereUniqueInput = AtLeastOne<{
  name: Maybe<String>;
}>;

export interface AddonEntityUpdateManyDataInput {
  pid?: Maybe<Int>;
  appsecret?: Maybe<String>;
  icon?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<Int>;
}

export type PostCategoryEntityWhereUniqueInput = AtLeastOne<{
  post_post_category_idid: Maybe<Int>;
}>;

export interface UserEntityUpdateManyWithoutPermissionsInput {
  create?: Maybe<
    | UserEntityCreateWithoutPermissionsInput[]
    | UserEntityCreateWithoutPermissionsInput
  >;
  delete?: Maybe<UserEntityWhereUniqueInput[] | UserEntityWhereUniqueInput>;
  connect?: Maybe<UserEntityWhereUniqueInput[] | UserEntityWhereUniqueInput>;
  set?: Maybe<UserEntityWhereUniqueInput[] | UserEntityWhereUniqueInput>;
  disconnect?: Maybe<UserEntityWhereUniqueInput[] | UserEntityWhereUniqueInput>;
  update?: Maybe<
    | UserEntityUpdateWithWhereUniqueWithoutPermissionsInput[]
    | UserEntityUpdateWithWhereUniqueWithoutPermissionsInput
  >;
  upsert?: Maybe<
    | UserEntityUpsertWithWhereUniqueWithoutPermissionsInput[]
    | UserEntityUpsertWithWhereUniqueWithoutPermissionsInput
  >;
  deleteMany?: Maybe<UserEntityScalarWhereInput[] | UserEntityScalarWhereInput>;
  updateMany?: Maybe<
    | UserEntityUpdateManyWithWhereNestedInput[]
    | UserEntityUpdateManyWithWhereNestedInput
  >;
}

export interface PostEntityUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<Int>;
  handler_user?: Maybe<String>;
}

export interface UserEntityUpdateWithWhereUniqueWithoutPermissionsInput {
  where: UserEntityWhereUniqueInput;
  data: UserEntityUpdateWithoutPermissionsDataInput;
}

export interface PostCategoryEntityUpdateManyMutationInput {
  title?: Maybe<String>;
  icon?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserEntityUpdateWithoutPermissionsDataInput {
  openid?: Maybe<String>;
  unionid?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  salt?: Maybe<String>;
  realname?: Maybe<String>;
  nickname?: Maybe<String>;
  avatar?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  sex?: Maybe<Int>;
  roles?: Maybe<RoleEntityUpdateManyInput>;
  organizations?: Maybe<OrganizationEntityUpdateManyInput>;
}

export interface PostCategoryEntityCreateInput {
  post_post_category_idid?: Maybe<Int>;
  title: String;
  icon: String;
  description: String;
}

export interface RoleEntityUpdateManyInput {
  create?: Maybe<RoleEntityCreateInput[] | RoleEntityCreateInput>;
  update?: Maybe<
    | RoleEntityUpdateWithWhereUniqueNestedInput[]
    | RoleEntityUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RoleEntityUpsertWithWhereUniqueNestedInput[]
    | RoleEntityUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  connect?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  set?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  disconnect?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  deleteMany?: Maybe<RoleEntityScalarWhereInput[] | RoleEntityScalarWhereInput>;
  updateMany?: Maybe<
    | RoleEntityUpdateManyWithWhereNestedInput[]
    | RoleEntityUpdateManyWithWhereNestedInput
  >;
}

export interface PermissionEntityUpdateInput {
  father_name?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  decription?: Maybe<String>;
  value?: Maybe<PermissionEntityUpdatevalueInput>;
  icon?: Maybe<String>;
  status?: Maybe<Int>;
  displayorder?: Maybe<Int>;
  fromAddon?: Maybe<AddonEntityUpdateOneRequiredInput>;
  addons?: Maybe<AddonEntityUpdateManyInput>;
  users?: Maybe<UserEntityUpdateManyWithoutPermissionsInput>;
  roles?: Maybe<RoleEntityUpdateManyWithoutPermissionsInput>;
}

export interface RoleEntityUpdateWithWhereUniqueNestedInput {
  where: RoleEntityWhereUniqueInput;
  data: RoleEntityUpdateDataInput;
}

export interface MessageEntityUpdateManyMutationInput {
  content?: Maybe<String>;
  msg_type?: Maybe<Int>;
  pic_url?: Maybe<String>;
  media_id?: Maybe<Int>;
  thumb_media_id?: Maybe<Int>;
  location_x?: Maybe<String>;
  location_y?: Maybe<String>;
  label?: Maybe<String>;
  title?: Maybe<String>;
  url?: Maybe<String>;
  description?: Maybe<String>;
  from_user?: Maybe<String>;
  to_user?: Maybe<String>;
}

export interface RoleEntityUpdateDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  permissions?: Maybe<PermissionEntityUpdateManyWithoutRolesInput>;
}

export interface MemberEntityUpdateManyMutationInput {
  name?: Maybe<String>;
  realname?: Maybe<String>;
  phone?: Maybe<String>;
  openid?: Maybe<String>;
  email?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  salt?: Maybe<String>;
}

export interface PermissionEntityUpdateManyWithoutRolesInput {
  create?: Maybe<
    | PermissionEntityCreateWithoutRolesInput[]
    | PermissionEntityCreateWithoutRolesInput
  >;
  delete?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  connect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  set?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  disconnect?: Maybe<
    PermissionEntityWhereUniqueInput[] | PermissionEntityWhereUniqueInput
  >;
  update?: Maybe<
    | PermissionEntityUpdateWithWhereUniqueWithoutRolesInput[]
    | PermissionEntityUpdateWithWhereUniqueWithoutRolesInput
  >;
  upsert?: Maybe<
    | PermissionEntityUpsertWithWhereUniqueWithoutRolesInput[]
    | PermissionEntityUpsertWithWhereUniqueWithoutRolesInput
  >;
  deleteMany?: Maybe<
    PermissionEntityScalarWhereInput[] | PermissionEntityScalarWhereInput
  >;
  updateMany?: Maybe<
    | PermissionEntityUpdateManyWithWhereNestedInput[]
    | PermissionEntityUpdateManyWithWhereNestedInput
  >;
}

export interface AddonEntityWhereInput {
  appid?: Maybe<Int>;
  appid_not?: Maybe<Int>;
  appid_in?: Maybe<Int[] | Int>;
  appid_not_in?: Maybe<Int[] | Int>;
  appid_lt?: Maybe<Int>;
  appid_lte?: Maybe<Int>;
  appid_gt?: Maybe<Int>;
  appid_gte?: Maybe<Int>;
  pid?: Maybe<Int>;
  pid_not?: Maybe<Int>;
  pid_in?: Maybe<Int[] | Int>;
  pid_not_in?: Maybe<Int[] | Int>;
  pid_lt?: Maybe<Int>;
  pid_lte?: Maybe<Int>;
  pid_gt?: Maybe<Int>;
  pid_gte?: Maybe<Int>;
  appsecret?: Maybe<String>;
  appsecret_not?: Maybe<String>;
  appsecret_in?: Maybe<String[] | String>;
  appsecret_not_in?: Maybe<String[] | String>;
  appsecret_lt?: Maybe<String>;
  appsecret_lte?: Maybe<String>;
  appsecret_gt?: Maybe<String>;
  appsecret_gte?: Maybe<String>;
  appsecret_contains?: Maybe<String>;
  appsecret_not_contains?: Maybe<String>;
  appsecret_starts_with?: Maybe<String>;
  appsecret_not_starts_with?: Maybe<String>;
  appsecret_ends_with?: Maybe<String>;
  appsecret_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  permissions_every?: Maybe<PermissionEntityWhereInput>;
  permissions_some?: Maybe<PermissionEntityWhereInput>;
  permissions_none?: Maybe<PermissionEntityWhereInput>;
  AND?: Maybe<AddonEntityWhereInput[] | AddonEntityWhereInput>;
  OR?: Maybe<AddonEntityWhereInput[] | AddonEntityWhereInput>;
  NOT?: Maybe<AddonEntityWhereInput[] | AddonEntityWhereInput>;
}

export interface PermissionEntityUpdateWithWhereUniqueWithoutRolesInput {
  where: PermissionEntityWhereUniqueInput;
  data: PermissionEntityUpdateWithoutRolesDataInput;
}

export interface PermissionEntityWhereInput {
  father_name?: Maybe<String>;
  father_name_not?: Maybe<String>;
  father_name_in?: Maybe<String[] | String>;
  father_name_not_in?: Maybe<String[] | String>;
  father_name_lt?: Maybe<String>;
  father_name_lte?: Maybe<String>;
  father_name_gt?: Maybe<String>;
  father_name_gte?: Maybe<String>;
  father_name_contains?: Maybe<String>;
  father_name_not_contains?: Maybe<String>;
  father_name_starts_with?: Maybe<String>;
  father_name_not_starts_with?: Maybe<String>;
  father_name_ends_with?: Maybe<String>;
  father_name_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  decription?: Maybe<String>;
  decription_not?: Maybe<String>;
  decription_in?: Maybe<String[] | String>;
  decription_not_in?: Maybe<String[] | String>;
  decription_lt?: Maybe<String>;
  decription_lte?: Maybe<String>;
  decription_gt?: Maybe<String>;
  decription_gte?: Maybe<String>;
  decription_contains?: Maybe<String>;
  decription_not_contains?: Maybe<String>;
  decription_starts_with?: Maybe<String>;
  decription_not_starts_with?: Maybe<String>;
  decription_ends_with?: Maybe<String>;
  decription_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  displayorder?: Maybe<Int>;
  displayorder_not?: Maybe<Int>;
  displayorder_in?: Maybe<Int[] | Int>;
  displayorder_not_in?: Maybe<Int[] | Int>;
  displayorder_lt?: Maybe<Int>;
  displayorder_lte?: Maybe<Int>;
  displayorder_gt?: Maybe<Int>;
  displayorder_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  fromAddon?: Maybe<AddonEntityWhereInput>;
  addons_every?: Maybe<AddonEntityWhereInput>;
  addons_some?: Maybe<AddonEntityWhereInput>;
  addons_none?: Maybe<AddonEntityWhereInput>;
  users_every?: Maybe<UserEntityWhereInput>;
  users_some?: Maybe<UserEntityWhereInput>;
  users_none?: Maybe<UserEntityWhereInput>;
  roles_every?: Maybe<RoleEntityWhereInput>;
  roles_some?: Maybe<RoleEntityWhereInput>;
  roles_none?: Maybe<RoleEntityWhereInput>;
  AND?: Maybe<PermissionEntityWhereInput[] | PermissionEntityWhereInput>;
  OR?: Maybe<PermissionEntityWhereInput[] | PermissionEntityWhereInput>;
  NOT?: Maybe<PermissionEntityWhereInput[] | PermissionEntityWhereInput>;
}

export interface PermissionEntityUpdateWithoutRolesDataInput {
  father_name?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  decription?: Maybe<String>;
  value?: Maybe<PermissionEntityUpdatevalueInput>;
  icon?: Maybe<String>;
  status?: Maybe<Int>;
  displayorder?: Maybe<Int>;
  fromAddon?: Maybe<AddonEntityUpdateOneRequiredInput>;
  addons?: Maybe<AddonEntityUpdateManyInput>;
  users?: Maybe<UserEntityUpdateManyWithoutPermissionsInput>;
}

export interface LoggerEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LoggerEntityWhereInput>;
  AND?: Maybe<
    LoggerEntitySubscriptionWhereInput[] | LoggerEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    LoggerEntitySubscriptionWhereInput[] | LoggerEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    LoggerEntitySubscriptionWhereInput[] | LoggerEntitySubscriptionWhereInput
  >;
}

export interface PermissionEntityUpsertWithWhereUniqueWithoutRolesInput {
  where: PermissionEntityWhereUniqueInput;
  update: PermissionEntityUpdateWithoutRolesDataInput;
  create: PermissionEntityCreateWithoutRolesInput;
}

export interface AddonEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddonEntityWhereInput>;
  AND?: Maybe<
    AddonEntitySubscriptionWhereInput[] | AddonEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    AddonEntitySubscriptionWhereInput[] | AddonEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    AddonEntitySubscriptionWhereInput[] | AddonEntitySubscriptionWhereInput
  >;
}

export interface PermissionEntityScalarWhereInput {
  father_name?: Maybe<String>;
  father_name_not?: Maybe<String>;
  father_name_in?: Maybe<String[] | String>;
  father_name_not_in?: Maybe<String[] | String>;
  father_name_lt?: Maybe<String>;
  father_name_lte?: Maybe<String>;
  father_name_gt?: Maybe<String>;
  father_name_gte?: Maybe<String>;
  father_name_contains?: Maybe<String>;
  father_name_not_contains?: Maybe<String>;
  father_name_starts_with?: Maybe<String>;
  father_name_not_starts_with?: Maybe<String>;
  father_name_ends_with?: Maybe<String>;
  father_name_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  decription?: Maybe<String>;
  decription_not?: Maybe<String>;
  decription_in?: Maybe<String[] | String>;
  decription_not_in?: Maybe<String[] | String>;
  decription_lt?: Maybe<String>;
  decription_lte?: Maybe<String>;
  decription_gt?: Maybe<String>;
  decription_gte?: Maybe<String>;
  decription_contains?: Maybe<String>;
  decription_not_contains?: Maybe<String>;
  decription_starts_with?: Maybe<String>;
  decription_not_starts_with?: Maybe<String>;
  decription_ends_with?: Maybe<String>;
  decription_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  displayorder?: Maybe<Int>;
  displayorder_not?: Maybe<Int>;
  displayorder_in?: Maybe<Int[] | Int>;
  displayorder_not_in?: Maybe<Int[] | Int>;
  displayorder_lt?: Maybe<Int>;
  displayorder_lte?: Maybe<Int>;
  displayorder_gt?: Maybe<Int>;
  displayorder_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PermissionEntityScalarWhereInput[] | PermissionEntityScalarWhereInput
  >;
  OR?: Maybe<
    PermissionEntityScalarWhereInput[] | PermissionEntityScalarWhereInput
  >;
  NOT?: Maybe<
    PermissionEntityScalarWhereInput[] | PermissionEntityScalarWhereInput
  >;
}

export interface UserOrganizationEntityUpdateInput {
  openid?: Maybe<String>;
  orgainization_id?: Maybe<Int>;
}

export interface PermissionEntityUpdateManyWithWhereNestedInput {
  where: PermissionEntityScalarWhereInput;
  data: PermissionEntityUpdateManyDataInput;
}

export type MemberEntityWhereUniqueInput = AtLeastOne<{
  member_id: Maybe<Int>;
}>;

export interface PermissionEntityUpdateManyDataInput {
  father_name?: Maybe<String>;
  name?: Maybe<String>;
  title?: Maybe<String>;
  decription?: Maybe<String>;
  value?: Maybe<PermissionEntityUpdatevalueInput>;
  icon?: Maybe<String>;
  status?: Maybe<Int>;
  displayorder?: Maybe<Int>;
}

export interface RolePermissionEntityUpdateManyMutationInput {
  role_id?: Maybe<Int>;
  permission_id?: Maybe<Int>;
}

export interface RoleEntityUpsertWithWhereUniqueNestedInput {
  where: RoleEntityWhereUniqueInput;
  update: RoleEntityUpdateDataInput;
  create: RoleEntityCreateInput;
}

export interface AccessTokenEntityUpsertWithoutRefreshTokenInput {
  update: AccessTokenEntityUpdateWithoutRefreshTokenDataInput;
  create: AccessTokenEntityCreateWithoutRefreshTokenInput;
}

export interface RoleEntityScalarWhereInput {
  role_id?: Maybe<Int>;
  role_id_not?: Maybe<Int>;
  role_id_in?: Maybe<Int[] | Int>;
  role_id_not_in?: Maybe<Int[] | Int>;
  role_id_lt?: Maybe<Int>;
  role_id_lte?: Maybe<Int>;
  role_id_gt?: Maybe<Int>;
  role_id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoleEntityScalarWhereInput[] | RoleEntityScalarWhereInput>;
  OR?: Maybe<RoleEntityScalarWhereInput[] | RoleEntityScalarWhereInput>;
  NOT?: Maybe<RoleEntityScalarWhereInput[] | RoleEntityScalarWhereInput>;
}

export interface PostCategoryEntityWhereInput {
  post_post_category_idid?: Maybe<Int>;
  post_post_category_idid_not?: Maybe<Int>;
  post_post_category_idid_in?: Maybe<Int[] | Int>;
  post_post_category_idid_not_in?: Maybe<Int[] | Int>;
  post_post_category_idid_lt?: Maybe<Int>;
  post_post_category_idid_lte?: Maybe<Int>;
  post_post_category_idid_gt?: Maybe<Int>;
  post_post_category_idid_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostCategoryEntityWhereInput[] | PostCategoryEntityWhereInput>;
  OR?: Maybe<PostCategoryEntityWhereInput[] | PostCategoryEntityWhereInput>;
  NOT?: Maybe<PostCategoryEntityWhereInput[] | PostCategoryEntityWhereInput>;
}

export interface RoleEntityUpdateManyWithWhereNestedInput {
  where: RoleEntityScalarWhereInput;
  data: RoleEntityUpdateManyDataInput;
}

export interface RefreshTokenEntityWhereInput {
  refresh_token_id?: Maybe<Int>;
  refresh_token_id_not?: Maybe<Int>;
  refresh_token_id_in?: Maybe<Int[] | Int>;
  refresh_token_id_not_in?: Maybe<Int[] | Int>;
  refresh_token_id_lt?: Maybe<Int>;
  refresh_token_id_lte?: Maybe<Int>;
  refresh_token_id_gt?: Maybe<Int>;
  refresh_token_id_gte?: Maybe<Int>;
  token?: Maybe<AccessTokenEntityWhereInput>;
  refresh_token?: Maybe<String>;
  refresh_token_not?: Maybe<String>;
  refresh_token_in?: Maybe<String[] | String>;
  refresh_token_not_in?: Maybe<String[] | String>;
  refresh_token_lt?: Maybe<String>;
  refresh_token_lte?: Maybe<String>;
  refresh_token_gt?: Maybe<String>;
  refresh_token_gte?: Maybe<String>;
  refresh_token_contains?: Maybe<String>;
  refresh_token_not_contains?: Maybe<String>;
  refresh_token_starts_with?: Maybe<String>;
  refresh_token_not_starts_with?: Maybe<String>;
  refresh_token_ends_with?: Maybe<String>;
  refresh_token_not_ends_with?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
  expires_in_not?: Maybe<DateTimeInput>;
  expires_in_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_in_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expires_in_lt?: Maybe<DateTimeInput>;
  expires_in_lte?: Maybe<DateTimeInput>;
  expires_in_gt?: Maybe<DateTimeInput>;
  expires_in_gte?: Maybe<DateTimeInput>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RefreshTokenEntityWhereInput[] | RefreshTokenEntityWhereInput>;
  OR?: Maybe<RefreshTokenEntityWhereInput[] | RefreshTokenEntityWhereInput>;
  NOT?: Maybe<RefreshTokenEntityWhereInput[] | RefreshTokenEntityWhereInput>;
}

export interface RoleEntityUpdateManyDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface OrganizationEntityUpdateInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  displayorder?: Maybe<Int>;
}

export interface OrganizationEntityUpdateManyInput {
  create?: Maybe<
    OrganizationEntityCreateInput[] | OrganizationEntityCreateInput
  >;
  update?: Maybe<
    | OrganizationEntityUpdateWithWhereUniqueNestedInput[]
    | OrganizationEntityUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrganizationEntityUpsertWithWhereUniqueNestedInput[]
    | OrganizationEntityUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    OrganizationEntityWhereUniqueInput[] | OrganizationEntityWhereUniqueInput
  >;
  connect?: Maybe<
    OrganizationEntityWhereUniqueInput[] | OrganizationEntityWhereUniqueInput
  >;
  set?: Maybe<
    OrganizationEntityWhereUniqueInput[] | OrganizationEntityWhereUniqueInput
  >;
  disconnect?: Maybe<
    OrganizationEntityWhereUniqueInput[] | OrganizationEntityWhereUniqueInput
  >;
  deleteMany?: Maybe<
    OrganizationEntityScalarWhereInput[] | OrganizationEntityScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrganizationEntityUpdateManyWithWhereNestedInput[]
    | OrganizationEntityUpdateManyWithWhereNestedInput
  >;
}

export interface RoleEntityWhereInput {
  role_id?: Maybe<Int>;
  role_id_not?: Maybe<Int>;
  role_id_in?: Maybe<Int[] | Int>;
  role_id_not_in?: Maybe<Int[] | Int>;
  role_id_lt?: Maybe<Int>;
  role_id_lte?: Maybe<Int>;
  role_id_gt?: Maybe<Int>;
  role_id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  permissions_every?: Maybe<PermissionEntityWhereInput>;
  permissions_some?: Maybe<PermissionEntityWhereInput>;
  permissions_none?: Maybe<PermissionEntityWhereInput>;
  AND?: Maybe<RoleEntityWhereInput[] | RoleEntityWhereInput>;
  OR?: Maybe<RoleEntityWhereInput[] | RoleEntityWhereInput>;
  NOT?: Maybe<RoleEntityWhereInput[] | RoleEntityWhereInput>;
}

export interface OrganizationEntityUpdateWithWhereUniqueNestedInput {
  where: OrganizationEntityWhereUniqueInput;
  data: OrganizationEntityUpdateDataInput;
}

export type ArticleCategoryEntityWhereUniqueInput = AtLeastOne<{
  article_category_id: Maybe<Int>;
}>;

export interface OrganizationEntityUpdateDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  displayorder?: Maybe<Int>;
}

export interface ArticleEntityWhereInput {
  article_id?: Maybe<Int>;
  article_id_not?: Maybe<Int>;
  article_id_in?: Maybe<Int[] | Int>;
  article_id_not_in?: Maybe<Int[] | Int>;
  article_id_lt?: Maybe<Int>;
  article_id_lte?: Maybe<Int>;
  article_id_gt?: Maybe<Int>;
  article_id_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  thumbs?: Maybe<String>;
  thumbs_not?: Maybe<String>;
  thumbs_in?: Maybe<String[] | String>;
  thumbs_not_in?: Maybe<String[] | String>;
  thumbs_lt?: Maybe<String>;
  thumbs_lte?: Maybe<String>;
  thumbs_gt?: Maybe<String>;
  thumbs_gte?: Maybe<String>;
  thumbs_contains?: Maybe<String>;
  thumbs_not_contains?: Maybe<String>;
  thumbs_starts_with?: Maybe<String>;
  thumbs_not_starts_with?: Maybe<String>;
  thumbs_ends_with?: Maybe<String>;
  thumbs_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  article_category_id?: Maybe<Int>;
  article_category_id_not?: Maybe<Int>;
  article_category_id_in?: Maybe<Int[] | Int>;
  article_category_id_not_in?: Maybe<Int[] | Int>;
  article_category_id_lt?: Maybe<Int>;
  article_category_id_lte?: Maybe<Int>;
  article_category_id_gt?: Maybe<Int>;
  article_category_id_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ArticleEntityWhereInput[] | ArticleEntityWhereInput>;
  OR?: Maybe<ArticleEntityWhereInput[] | ArticleEntityWhereInput>;
  NOT?: Maybe<ArticleEntityWhereInput[] | ArticleEntityWhereInput>;
}

export interface OrganizationEntityUpsertWithWhereUniqueNestedInput {
  where: OrganizationEntityWhereUniqueInput;
  update: OrganizationEntityUpdateDataInput;
  create: OrganizationEntityCreateInput;
}

export interface PermissionEntityCreateWithoutUsersInput {
  father_name: String;
  name: String;
  title: String;
  decription: String;
  value?: Maybe<PermissionEntityCreatevalueInput>;
  icon: String;
  status: Int;
  displayorder: Int;
  fromAddon: AddonEntityCreateOneInput;
  addons?: Maybe<AddonEntityCreateManyInput>;
  roles?: Maybe<RoleEntityCreateManyWithoutPermissionsInput>;
}

export interface OrganizationEntityScalarWhereInput {
  organization_id?: Maybe<Int>;
  organization_id_not?: Maybe<Int>;
  organization_id_in?: Maybe<Int[] | Int>;
  organization_id_not_in?: Maybe<Int[] | Int>;
  organization_id_lt?: Maybe<Int>;
  organization_id_lte?: Maybe<Int>;
  organization_id_gt?: Maybe<Int>;
  organization_id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  displayorder?: Maybe<Int>;
  displayorder_not?: Maybe<Int>;
  displayorder_in?: Maybe<Int[] | Int>;
  displayorder_not_in?: Maybe<Int[] | Int>;
  displayorder_lt?: Maybe<Int>;
  displayorder_lte?: Maybe<Int>;
  displayorder_gt?: Maybe<Int>;
  displayorder_gte?: Maybe<Int>;
  AND?: Maybe<
    OrganizationEntityScalarWhereInput[] | OrganizationEntityScalarWhereInput
  >;
  OR?: Maybe<
    OrganizationEntityScalarWhereInput[] | OrganizationEntityScalarWhereInput
  >;
  NOT?: Maybe<
    OrganizationEntityScalarWhereInput[] | OrganizationEntityScalarWhereInput
  >;
}

export interface RefreshTokenEntityUpdateInput {
  token?: Maybe<AccessTokenEntityUpdateOneRequiredWithoutRefreshTokenInput>;
  refresh_token?: Maybe<String>;
  expires_in?: Maybe<DateTimeInput>;
}

export interface OrganizationEntityUpdateManyWithWhereNestedInput {
  where: OrganizationEntityScalarWhereInput;
  data: OrganizationEntityUpdateManyDataInput;
}

export type RefreshTokenEntityWhereUniqueInput = AtLeastOne<{
  refresh_token_id: Maybe<Int>;
}>;

export interface OrganizationEntityUpdateManyDataInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  displayorder?: Maybe<Int>;
}

export interface RefreshTokenEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RefreshTokenEntityWhereInput>;
  AND?: Maybe<
    | RefreshTokenEntitySubscriptionWhereInput[]
    | RefreshTokenEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | RefreshTokenEntitySubscriptionWhereInput[]
    | RefreshTokenEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | RefreshTokenEntitySubscriptionWhereInput[]
    | RefreshTokenEntitySubscriptionWhereInput
  >;
}

export interface UserEntityUpsertWithWhereUniqueWithoutPermissionsInput {
  where: UserEntityWhereUniqueInput;
  update: UserEntityUpdateWithoutPermissionsDataInput;
  create: UserEntityCreateWithoutPermissionsInput;
}

export interface UserEntityUpdateManyMutationInput {
  openid?: Maybe<String>;
  unionid?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  salt?: Maybe<String>;
  realname?: Maybe<String>;
  nickname?: Maybe<String>;
  avatar?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  sex?: Maybe<Int>;
}

export interface RoleEntityUpdateManyWithoutPermissionsInput {
  create?: Maybe<
    | RoleEntityCreateWithoutPermissionsInput[]
    | RoleEntityCreateWithoutPermissionsInput
  >;
  delete?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  connect?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  set?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  disconnect?: Maybe<RoleEntityWhereUniqueInput[] | RoleEntityWhereUniqueInput>;
  update?: Maybe<
    | RoleEntityUpdateWithWhereUniqueWithoutPermissionsInput[]
    | RoleEntityUpdateWithWhereUniqueWithoutPermissionsInput
  >;
  upsert?: Maybe<
    | RoleEntityUpsertWithWhereUniqueWithoutPermissionsInput[]
    | RoleEntityUpsertWithWhereUniqueWithoutPermissionsInput
  >;
  deleteMany?: Maybe<RoleEntityScalarWhereInput[] | RoleEntityScalarWhereInput>;
  updateMany?: Maybe<
    | RoleEntityUpdateManyWithWhereNestedInput[]
    | RoleEntityUpdateManyWithWhereNestedInput
  >;
}

export interface UserEntityUpdateManyDataInput {
  openid?: Maybe<String>;
  unionid?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  salt?: Maybe<String>;
  realname?: Maybe<String>;
  nickname?: Maybe<String>;
  avatar?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  sex?: Maybe<Int>;
}

export interface UserEntityUpdateManyWithWhereNestedInput {
  where: UserEntityScalarWhereInput;
  data: UserEntityUpdateManyDataInput;
}

export interface UserEntityScalarWhereInput {
  user_id?: Maybe<Int>;
  user_id_not?: Maybe<Int>;
  user_id_in?: Maybe<Int[] | Int>;
  user_id_not_in?: Maybe<Int[] | Int>;
  user_id_lt?: Maybe<Int>;
  user_id_lte?: Maybe<Int>;
  user_id_gt?: Maybe<Int>;
  user_id_gte?: Maybe<Int>;
  openid?: Maybe<String>;
  openid_not?: Maybe<String>;
  openid_in?: Maybe<String[] | String>;
  openid_not_in?: Maybe<String[] | String>;
  openid_lt?: Maybe<String>;
  openid_lte?: Maybe<String>;
  openid_gt?: Maybe<String>;
  openid_gte?: Maybe<String>;
  openid_contains?: Maybe<String>;
  openid_not_contains?: Maybe<String>;
  openid_starts_with?: Maybe<String>;
  openid_not_starts_with?: Maybe<String>;
  openid_ends_with?: Maybe<String>;
  openid_not_ends_with?: Maybe<String>;
  unionid?: Maybe<String>;
  unionid_not?: Maybe<String>;
  unionid_in?: Maybe<String[] | String>;
  unionid_not_in?: Maybe<String[] | String>;
  unionid_lt?: Maybe<String>;
  unionid_lte?: Maybe<String>;
  unionid_gt?: Maybe<String>;
  unionid_gte?: Maybe<String>;
  unionid_contains?: Maybe<String>;
  unionid_not_contains?: Maybe<String>;
  unionid_starts_with?: Maybe<String>;
  unionid_not_starts_with?: Maybe<String>;
  unionid_ends_with?: Maybe<String>;
  unionid_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  salt?: Maybe<String>;
  salt_not?: Maybe<String>;
  salt_in?: Maybe<String[] | String>;
  salt_not_in?: Maybe<String[] | String>;
  salt_lt?: Maybe<String>;
  salt_lte?: Maybe<String>;
  salt_gt?: Maybe<String>;
  salt_gte?: Maybe<String>;
  salt_contains?: Maybe<String>;
  salt_not_contains?: Maybe<String>;
  salt_starts_with?: Maybe<String>;
  salt_not_starts_with?: Maybe<String>;
  salt_ends_with?: Maybe<String>;
  salt_not_ends_with?: Maybe<String>;
  realname?: Maybe<String>;
  realname_not?: Maybe<String>;
  realname_in?: Maybe<String[] | String>;
  realname_not_in?: Maybe<String[] | String>;
  realname_lt?: Maybe<String>;
  realname_lte?: Maybe<String>;
  realname_gt?: Maybe<String>;
  realname_gte?: Maybe<String>;
  realname_contains?: Maybe<String>;
  realname_not_contains?: Maybe<String>;
  realname_starts_with?: Maybe<String>;
  realname_not_starts_with?: Maybe<String>;
  realname_ends_with?: Maybe<String>;
  realname_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  sex?: Maybe<Int>;
  sex_not?: Maybe<Int>;
  sex_in?: Maybe<Int[] | Int>;
  sex_not_in?: Maybe<Int[] | Int>;
  sex_lt?: Maybe<Int>;
  sex_lte?: Maybe<Int>;
  sex_gt?: Maybe<Int>;
  sex_gte?: Maybe<Int>;
  create_time?: Maybe<DateTimeInput>;
  create_time_not?: Maybe<DateTimeInput>;
  create_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  create_time_lt?: Maybe<DateTimeInput>;
  create_time_lte?: Maybe<DateTimeInput>;
  create_time_gt?: Maybe<DateTimeInput>;
  create_time_gte?: Maybe<DateTimeInput>;
  update_time?: Maybe<DateTimeInput>;
  update_time_not?: Maybe<DateTimeInput>;
  update_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  update_time_lt?: Maybe<DateTimeInput>;
  update_time_lte?: Maybe<DateTimeInput>;
  update_time_gt?: Maybe<DateTimeInput>;
  update_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserEntityScalarWhereInput[] | UserEntityScalarWhereInput>;
  OR?: Maybe<UserEntityScalarWhereInput[] | UserEntityScalarWhereInput>;
  NOT?: Maybe<UserEntityScalarWhereInput[] | UserEntityScalarWhereInput>;
}

export interface RoleEntityUpdateManyMutationInput {
  name?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ArticleCategoryEntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleCategoryEntityWhereInput>;
  AND?: Maybe<
    | ArticleCategoryEntitySubscriptionWhereInput[]
    | ArticleCategoryEntitySubscriptionWhereInput
  >;
  OR?: Maybe<
    | ArticleCategoryEntitySubscriptionWhereInput[]
    | ArticleCategoryEntitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ArticleCategoryEntitySubscriptionWhereInput[]
    | ArticleCategoryEntitySubscriptionWhereInput
  >;
}

export interface MessageEntityCreateInput {
  msg_id?: Maybe<Int>;
  content: String;
  msg_type: Int;
  pic_url: String;
  media_id: Int;
  thumb_media_id: Int;
  location_x: String;
  location_y: String;
  label: String;
  title: String;
  url: String;
  description: String;
  from_user: String;
  to_user: String;
}

export interface PostEntityCreateInput {
  post_id?: Maybe<Int>;
  title: String;
  content: String;
  status: Int;
  handler_user: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserRoleEntityPreviousValues {
  user_role_id: Int;
  openid: String;
  role_id: Int;
}

export interface UserRoleEntityPreviousValuesPromise
  extends Promise<UserRoleEntityPreviousValues>,
    Fragmentable {
  user_role_id: () => Promise<Int>;
  openid: () => Promise<String>;
  role_id: () => Promise<Int>;
}

export interface UserRoleEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<UserRoleEntityPreviousValues>>,
    Fragmentable {
  user_role_id: () => Promise<AsyncIterator<Int>>;
  openid: () => Promise<AsyncIterator<String>>;
  role_id: () => Promise<AsyncIterator<Int>>;
}

export interface ArticleEntityConnection {
  pageInfo: PageInfo;
  edges: ArticleEntityEdge[];
}

export interface ArticleEntityConnectionPromise
  extends Promise<ArticleEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleEntityEdge>>() => T;
  aggregate: <T = AggregateArticleEntityPromise>() => T;
}

export interface ArticleEntityConnectionSubscription
  extends Promise<AsyncIterator<ArticleEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleEntitySubscription>() => T;
}

export interface PermissionEntity {
  father_name: String;
  name: String;
  title: String;
  decription: String;
  value: String[];
  icon: String;
  status: Int;
  displayorder: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface PermissionEntityPromise
  extends Promise<PermissionEntity>,
    Fragmentable {
  father_name: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  decription: () => Promise<String>;
  value: () => Promise<String[]>;
  icon: () => Promise<String>;
  status: () => Promise<Int>;
  displayorder: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  fromAddon: <T = AddonEntityPromise>() => T;
  addons: <T = FragmentableArray<AddonEntity>>(args?: {
    where?: AddonEntityWhereInput;
    orderBy?: AddonEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  users: <T = FragmentableArray<UserEntity>>(args?: {
    where?: UserEntityWhereInput;
    orderBy?: UserEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<RoleEntity>>(args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PermissionEntitySubscription
  extends Promise<AsyncIterator<PermissionEntity>>,
    Fragmentable {
  father_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  decription: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String[]>>;
  icon: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  displayorder: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  fromAddon: <T = AddonEntitySubscription>() => T;
  addons: <T = Promise<AsyncIterator<AddonEntitySubscription>>>(args?: {
    where?: AddonEntityWhereInput;
    orderBy?: AddonEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  users: <T = Promise<AsyncIterator<UserEntitySubscription>>>(args?: {
    where?: UserEntityWhereInput;
    orderBy?: UserEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = Promise<AsyncIterator<RoleEntitySubscription>>>(args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PermissionEntityNullablePromise
  extends Promise<PermissionEntity | null>,
    Fragmentable {
  father_name: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  decription: () => Promise<String>;
  value: () => Promise<String[]>;
  icon: () => Promise<String>;
  status: () => Promise<Int>;
  displayorder: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  fromAddon: <T = AddonEntityPromise>() => T;
  addons: <T = FragmentableArray<AddonEntity>>(args?: {
    where?: AddonEntityWhereInput;
    orderBy?: AddonEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  users: <T = FragmentableArray<UserEntity>>(args?: {
    where?: UserEntityWhereInput;
    orderBy?: UserEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<RoleEntity>>(args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateAccessTokenEntity {
  count: Int;
}

export interface AggregateAccessTokenEntityPromise
  extends Promise<AggregateAccessTokenEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccessTokenEntitySubscription
  extends Promise<AsyncIterator<AggregateAccessTokenEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ArticleEntity {
  article_id: Int;
  title: String;
  description: String;
  thumbs: String;
  icon: String;
  article_category_id: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface ArticleEntityPromise
  extends Promise<ArticleEntity>,
    Fragmentable {
  article_id: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  thumbs: () => Promise<String>;
  icon: () => Promise<String>;
  article_category_id: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleEntitySubscription
  extends Promise<AsyncIterator<ArticleEntity>>,
    Fragmentable {
  article_id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  thumbs: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  article_category_id: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ArticleEntityNullablePromise
  extends Promise<ArticleEntity | null>,
    Fragmentable {
  article_id: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  thumbs: () => Promise<String>;
  icon: () => Promise<String>;
  article_category_id: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface AggregateUserRoleEntity {
  count: Int;
}

export interface AggregateUserRoleEntityPromise
  extends Promise<AggregateUserRoleEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRoleEntitySubscription
  extends Promise<AsyncIterator<AggregateUserRoleEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateArticleCommentEntity {
  count: Int;
}

export interface AggregateArticleCommentEntityPromise
  extends Promise<AggregateArticleCommentEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleCommentEntitySubscription
  extends Promise<AsyncIterator<AggregateArticleCommentEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserRoleEntityConnection {
  pageInfo: PageInfo;
  edges: UserRoleEntityEdge[];
}

export interface UserRoleEntityConnectionPromise
  extends Promise<UserRoleEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRoleEntityEdge>>() => T;
  aggregate: <T = AggregateUserRoleEntityPromise>() => T;
}

export interface UserRoleEntityConnectionSubscription
  extends Promise<AsyncIterator<UserRoleEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserRoleEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserRoleEntitySubscription>() => T;
}

export interface AccessTokenEntity {
  access_token_id: Int;
  access_token: String;
  openid: String;
  appid: String;
  ip: String;
  platform: String;
  grant_type: Int;
  scope: String;
  expires_in: DateTimeOutput;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
  status: Int;
}

export interface AccessTokenEntityPromise
  extends Promise<AccessTokenEntity>,
    Fragmentable {
  access_token_id: () => Promise<Int>;
  access_token: () => Promise<String>;
  openid: () => Promise<String>;
  appid: () => Promise<String>;
  ip: () => Promise<String>;
  platform: () => Promise<String>;
  grant_type: () => Promise<Int>;
  scope: () => Promise<String>;
  expires_in: () => Promise<DateTimeOutput>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
  refreshToken: <T = RefreshTokenEntityPromise>() => T;
}

export interface AccessTokenEntitySubscription
  extends Promise<AsyncIterator<AccessTokenEntity>>,
    Fragmentable {
  access_token_id: () => Promise<AsyncIterator<Int>>;
  access_token: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  appid: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  platform: () => Promise<AsyncIterator<String>>;
  grant_type: () => Promise<AsyncIterator<Int>>;
  scope: () => Promise<AsyncIterator<String>>;
  expires_in: () => Promise<AsyncIterator<DateTimeOutput>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
  refreshToken: <T = RefreshTokenEntitySubscription>() => T;
}

export interface AccessTokenEntityNullablePromise
  extends Promise<AccessTokenEntity | null>,
    Fragmentable {
  access_token_id: () => Promise<Int>;
  access_token: () => Promise<String>;
  openid: () => Promise<String>;
  appid: () => Promise<String>;
  ip: () => Promise<String>;
  platform: () => Promise<String>;
  grant_type: () => Promise<Int>;
  scope: () => Promise<String>;
  expires_in: () => Promise<DateTimeOutput>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
  refreshToken: <T = RefreshTokenEntityPromise>() => T;
}

export interface UserRoleEntity {
  user_role_id: Int;
  openid: String;
  role_id: Int;
}

export interface UserRoleEntityPromise
  extends Promise<UserRoleEntity>,
    Fragmentable {
  user_role_id: () => Promise<Int>;
  openid: () => Promise<String>;
  role_id: () => Promise<Int>;
}

export interface UserRoleEntitySubscription
  extends Promise<AsyncIterator<UserRoleEntity>>,
    Fragmentable {
  user_role_id: () => Promise<AsyncIterator<Int>>;
  openid: () => Promise<AsyncIterator<String>>;
  role_id: () => Promise<AsyncIterator<Int>>;
}

export interface UserRoleEntityNullablePromise
  extends Promise<UserRoleEntity | null>,
    Fragmentable {
  user_role_id: () => Promise<Int>;
  openid: () => Promise<String>;
  role_id: () => Promise<Int>;
}

export interface AccessTokenEntitySubscriptionPayload {
  mutation: MutationType;
  node: AccessTokenEntity;
  updatedFields: String[];
  previousValues: AccessTokenEntityPreviousValues;
}

export interface AccessTokenEntitySubscriptionPayloadPromise
  extends Promise<AccessTokenEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccessTokenEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccessTokenEntityPreviousValuesPromise>() => T;
}

export interface AccessTokenEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccessTokenEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccessTokenEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccessTokenEntityPreviousValuesSubscription>() => T;
}

export interface UserOrganizationEntityEdge {
  node: UserOrganizationEntity;
  cursor: String;
}

export interface UserOrganizationEntityEdgePromise
  extends Promise<UserOrganizationEntityEdge>,
    Fragmentable {
  node: <T = UserOrganizationEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserOrganizationEntityEdgeSubscription
  extends Promise<AsyncIterator<UserOrganizationEntityEdge>>,
    Fragmentable {
  node: <T = UserOrganizationEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserOrganizationEntity {
  count: Int;
}

export interface AggregateUserOrganizationEntityPromise
  extends Promise<AggregateUserOrganizationEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserOrganizationEntitySubscription
  extends Promise<AsyncIterator<AggregateUserOrganizationEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleEntity {
  role_id: Int;
  name: String;
  title: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface RoleEntityPromise extends Promise<RoleEntity>, Fragmentable {
  role_id: () => Promise<Int>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  permissions: <T = FragmentableArray<PermissionEntity>>(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleEntitySubscription
  extends Promise<AsyncIterator<RoleEntity>>,
    Fragmentable {
  role_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  permissions: <
    T = Promise<AsyncIterator<PermissionEntitySubscription>>
  >(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RoleEntityNullablePromise
  extends Promise<RoleEntity | null>,
    Fragmentable {
  role_id: () => Promise<Int>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  permissions: <T = FragmentableArray<PermissionEntity>>(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserOrganizationEntityConnection {
  pageInfo: PageInfo;
  edges: UserOrganizationEntityEdge[];
}

export interface UserOrganizationEntityConnectionPromise
  extends Promise<UserOrganizationEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserOrganizationEntityEdge>>() => T;
  aggregate: <T = AggregateUserOrganizationEntityPromise>() => T;
}

export interface UserOrganizationEntityConnectionSubscription
  extends Promise<AsyncIterator<UserOrganizationEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserOrganizationEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserOrganizationEntitySubscription>() => T;
}

export interface AccessTokenEntityPreviousValues {
  access_token_id: Int;
  access_token: String;
  openid: String;
  appid: String;
  ip: String;
  platform: String;
  grant_type: Int;
  scope: String;
  expires_in: DateTimeOutput;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
  status: Int;
}

export interface AccessTokenEntityPreviousValuesPromise
  extends Promise<AccessTokenEntityPreviousValues>,
    Fragmentable {
  access_token_id: () => Promise<Int>;
  access_token: () => Promise<String>;
  openid: () => Promise<String>;
  appid: () => Promise<String>;
  ip: () => Promise<String>;
  platform: () => Promise<String>;
  grant_type: () => Promise<Int>;
  scope: () => Promise<String>;
  expires_in: () => Promise<DateTimeOutput>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  status: () => Promise<Int>;
}

export interface AccessTokenEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<AccessTokenEntityPreviousValues>>,
    Fragmentable {
  access_token_id: () => Promise<AsyncIterator<Int>>;
  access_token: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  appid: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  platform: () => Promise<AsyncIterator<String>>;
  grant_type: () => Promise<AsyncIterator<Int>>;
  scope: () => Promise<AsyncIterator<String>>;
  expires_in: () => Promise<AsyncIterator<DateTimeOutput>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface UserOrganizationEntity {
  user_orgainization_id: Int;
  openid: String;
  orgainization_id: Int;
}

export interface UserOrganizationEntityPromise
  extends Promise<UserOrganizationEntity>,
    Fragmentable {
  user_orgainization_id: () => Promise<Int>;
  openid: () => Promise<String>;
  orgainization_id: () => Promise<Int>;
}

export interface UserOrganizationEntitySubscription
  extends Promise<AsyncIterator<UserOrganizationEntity>>,
    Fragmentable {
  user_orgainization_id: () => Promise<AsyncIterator<Int>>;
  openid: () => Promise<AsyncIterator<String>>;
  orgainization_id: () => Promise<AsyncIterator<Int>>;
}

export interface UserOrganizationEntityNullablePromise
  extends Promise<UserOrganizationEntity | null>,
    Fragmentable {
  user_orgainization_id: () => Promise<Int>;
  openid: () => Promise<String>;
  orgainization_id: () => Promise<Int>;
}

export interface UserEntityEdge {
  node: UserEntity;
  cursor: String;
}

export interface UserEntityEdgePromise
  extends Promise<UserEntityEdge>,
    Fragmentable {
  node: <T = UserEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEntityEdgeSubscription
  extends Promise<AsyncIterator<UserEntityEdge>>,
    Fragmentable {
  node: <T = UserEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleCommentEntityEdge {
  node: ArticleCommentEntity;
  cursor: String;
}

export interface ArticleCommentEntityEdgePromise
  extends Promise<ArticleCommentEntityEdge>,
    Fragmentable {
  node: <T = ArticleCommentEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleCommentEntityEdgeSubscription
  extends Promise<AsyncIterator<ArticleCommentEntityEdge>>,
    Fragmentable {
  node: <T = ArticleCommentEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRolePermissionEntity {
  count: Int;
}

export interface AggregateRolePermissionEntityPromise
  extends Promise<AggregateRolePermissionEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRolePermissionEntitySubscription
  extends Promise<AsyncIterator<AggregateRolePermissionEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddonEntitySubscriptionPayload {
  mutation: MutationType;
  node: AddonEntity;
  updatedFields: String[];
  previousValues: AddonEntityPreviousValues;
}

export interface AddonEntitySubscriptionPayloadPromise
  extends Promise<AddonEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddonEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddonEntityPreviousValuesPromise>() => T;
}

export interface AddonEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddonEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddonEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddonEntityPreviousValuesSubscription>() => T;
}

export interface RolePermissionEntityConnection {
  pageInfo: PageInfo;
  edges: RolePermissionEntityEdge[];
}

export interface RolePermissionEntityConnectionPromise
  extends Promise<RolePermissionEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RolePermissionEntityEdge>>() => T;
  aggregate: <T = AggregateRolePermissionEntityPromise>() => T;
}

export interface RolePermissionEntityConnectionSubscription
  extends Promise<AsyncIterator<RolePermissionEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<RolePermissionEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateRolePermissionEntitySubscription>() => T;
}

export interface AddonEntityPreviousValues {
  appid: Int;
  pid: Int;
  appsecret: String;
  icon: String;
  name: String;
  title: String;
  description: String;
  status: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface AddonEntityPreviousValuesPromise
  extends Promise<AddonEntityPreviousValues>,
    Fragmentable {
  appid: () => Promise<Int>;
  pid: () => Promise<Int>;
  appsecret: () => Promise<String>;
  icon: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface AddonEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<AddonEntityPreviousValues>>,
    Fragmentable {
  appid: () => Promise<AsyncIterator<Int>>;
  pid: () => Promise<AsyncIterator<Int>>;
  appsecret: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RolePermissionEntity {
  role_permission_id: Int;
  role_id: Int;
  permission_id: Int;
}

export interface RolePermissionEntityPromise
  extends Promise<RolePermissionEntity>,
    Fragmentable {
  role_permission_id: () => Promise<Int>;
  role_id: () => Promise<Int>;
  permission_id: () => Promise<Int>;
}

export interface RolePermissionEntitySubscription
  extends Promise<AsyncIterator<RolePermissionEntity>>,
    Fragmentable {
  role_permission_id: () => Promise<AsyncIterator<Int>>;
  role_id: () => Promise<AsyncIterator<Int>>;
  permission_id: () => Promise<AsyncIterator<Int>>;
}

export interface RolePermissionEntityNullablePromise
  extends Promise<RolePermissionEntity | null>,
    Fragmentable {
  role_permission_id: () => Promise<Int>;
  role_id: () => Promise<Int>;
  permission_id: () => Promise<Int>;
}

export interface ArticleCommentEntityConnection {
  pageInfo: PageInfo;
  edges: ArticleCommentEntityEdge[];
}

export interface ArticleCommentEntityConnectionPromise
  extends Promise<ArticleCommentEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleCommentEntityEdge>>() => T;
  aggregate: <T = AggregateArticleCommentEntityPromise>() => T;
}

export interface ArticleCommentEntityConnectionSubscription
  extends Promise<AsyncIterator<ArticleCommentEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ArticleCommentEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateArticleCommentEntitySubscription>() => T;
}

export interface RoleEntityEdge {
  node: RoleEntity;
  cursor: String;
}

export interface RoleEntityEdgePromise
  extends Promise<RoleEntityEdge>,
    Fragmentable {
  node: <T = RoleEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEntityEdgeSubscription
  extends Promise<AsyncIterator<RoleEntityEdge>>,
    Fragmentable {
  node: <T = RoleEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddonPermissionEntitySubscriptionPayload {
  mutation: MutationType;
  node: AddonPermissionEntity;
  updatedFields: String[];
  previousValues: AddonPermissionEntityPreviousValues;
}

export interface AddonPermissionEntitySubscriptionPayloadPromise
  extends Promise<AddonPermissionEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddonPermissionEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddonPermissionEntityPreviousValuesPromise>() => T;
}

export interface AddonPermissionEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddonPermissionEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddonPermissionEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddonPermissionEntityPreviousValuesSubscription>() => T;
}

export interface AggregateRefreshTokenEntity {
  count: Int;
}

export interface AggregateRefreshTokenEntityPromise
  extends Promise<AggregateRefreshTokenEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRefreshTokenEntitySubscription
  extends Promise<AsyncIterator<AggregateRefreshTokenEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddonPermissionEntityPreviousValues {
  addon_permission_id: Int;
  addon_id: Int;
  permission_id: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface AddonPermissionEntityPreviousValuesPromise
  extends Promise<AddonPermissionEntityPreviousValues>,
    Fragmentable {
  addon_permission_id: () => Promise<Int>;
  addon_id: () => Promise<Int>;
  permission_id: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface AddonPermissionEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<AddonPermissionEntityPreviousValues>>,
    Fragmentable {
  addon_permission_id: () => Promise<AsyncIterator<Int>>;
  addon_id: () => Promise<AsyncIterator<Int>>;
  permission_id: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RefreshTokenEntityConnection {
  pageInfo: PageInfo;
  edges: RefreshTokenEntityEdge[];
}

export interface RefreshTokenEntityConnectionPromise
  extends Promise<RefreshTokenEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RefreshTokenEntityEdge>>() => T;
  aggregate: <T = AggregateRefreshTokenEntityPromise>() => T;
}

export interface RefreshTokenEntityConnectionSubscription
  extends Promise<AsyncIterator<RefreshTokenEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<RefreshTokenEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateRefreshTokenEntitySubscription>() => T;
}

export interface ArticleCommentEntity {
  article_comment_id: Int;
  content: String;
  pid: Int;
  article_id: Int;
  from_user_id: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface ArticleCommentEntityPromise
  extends Promise<ArticleCommentEntity>,
    Fragmentable {
  article_comment_id: () => Promise<Int>;
  content: () => Promise<String>;
  pid: () => Promise<Int>;
  article_id: () => Promise<Int>;
  from_user_id: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleCommentEntitySubscription
  extends Promise<AsyncIterator<ArticleCommentEntity>>,
    Fragmentable {
  article_comment_id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  article_id: () => Promise<AsyncIterator<Int>>;
  from_user_id: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ArticleCommentEntityNullablePromise
  extends Promise<ArticleCommentEntity | null>,
    Fragmentable {
  article_comment_id: () => Promise<Int>;
  content: () => Promise<String>;
  pid: () => Promise<Int>;
  article_id: () => Promise<Int>;
  from_user_id: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PostEntityEdge {
  node: PostEntity;
  cursor: String;
}

export interface PostEntityEdgePromise
  extends Promise<PostEntityEdge>,
    Fragmentable {
  node: <T = PostEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEntityEdgeSubscription
  extends Promise<AsyncIterator<PostEntityEdge>>,
    Fragmentable {
  node: <T = PostEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleCategoryEntitySubscriptionPayload {
  mutation: MutationType;
  node: ArticleCategoryEntity;
  updatedFields: String[];
  previousValues: ArticleCategoryEntityPreviousValues;
}

export interface ArticleCategoryEntitySubscriptionPayloadPromise
  extends Promise<ArticleCategoryEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticleCategoryEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticleCategoryEntityPreviousValuesPromise>() => T;
}

export interface ArticleCategoryEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleCategoryEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleCategoryEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticleCategoryEntityPreviousValuesSubscription>() => T;
}

export interface PostEntity {
  post_id: Int;
  title: String;
  content: String;
  status: Int;
  handler_user: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface PostEntityPromise extends Promise<PostEntity>, Fragmentable {
  post_id: () => Promise<Int>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<Int>;
  handler_user: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PostEntitySubscription
  extends Promise<AsyncIterator<PostEntity>>,
    Fragmentable {
  post_id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  handler_user: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostEntityNullablePromise
  extends Promise<PostEntity | null>,
    Fragmentable {
  post_id: () => Promise<Int>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<Int>;
  handler_user: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleCategoryEntityPreviousValues {
  article_category_id: Int;
  title: String;
  name: String;
  icon: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface ArticleCategoryEntityPreviousValuesPromise
  extends Promise<ArticleCategoryEntityPreviousValues>,
    Fragmentable {
  article_category_id: () => Promise<Int>;
  title: () => Promise<String>;
  name: () => Promise<String>;
  icon: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleCategoryEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticleCategoryEntityPreviousValues>>,
    Fragmentable {
  article_category_id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostCategoryEntityEdge {
  node: PostCategoryEntity;
  cursor: String;
}

export interface PostCategoryEntityEdgePromise
  extends Promise<PostCategoryEntityEdge>,
    Fragmentable {
  node: <T = PostCategoryEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostCategoryEntityEdgeSubscription
  extends Promise<AsyncIterator<PostCategoryEntityEdge>>,
    Fragmentable {
  node: <T = PostCategoryEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArticleCategoryEntity {
  count: Int;
}

export interface AggregateArticleCategoryEntityPromise
  extends Promise<AggregateArticleCategoryEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleCategoryEntitySubscription
  extends Promise<AsyncIterator<AggregateArticleCategoryEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AccessTokenEntityConnection {
  pageInfo: PageInfo;
  edges: AccessTokenEntityEdge[];
}

export interface AccessTokenEntityConnectionPromise
  extends Promise<AccessTokenEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccessTokenEntityEdge>>() => T;
  aggregate: <T = AggregateAccessTokenEntityPromise>() => T;
}

export interface AccessTokenEntityConnectionSubscription
  extends Promise<AsyncIterator<AccessTokenEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccessTokenEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccessTokenEntitySubscription>() => T;
}

export interface ArticleCommentEntitySubscriptionPayload {
  mutation: MutationType;
  node: ArticleCommentEntity;
  updatedFields: String[];
  previousValues: ArticleCommentEntityPreviousValues;
}

export interface ArticleCommentEntitySubscriptionPayloadPromise
  extends Promise<ArticleCommentEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticleCommentEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticleCommentEntityPreviousValuesPromise>() => T;
}

export interface ArticleCommentEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleCommentEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleCommentEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticleCommentEntityPreviousValuesSubscription>() => T;
}

export interface AggregatePermissionEntity {
  count: Int;
}

export interface AggregatePermissionEntityPromise
  extends Promise<AggregatePermissionEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePermissionEntitySubscription
  extends Promise<AsyncIterator<AggregatePermissionEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticleCommentEntityPreviousValues {
  article_comment_id: Int;
  content: String;
  pid: Int;
  article_id: Int;
  from_user_id: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface ArticleCommentEntityPreviousValuesPromise
  extends Promise<ArticleCommentEntityPreviousValues>,
    Fragmentable {
  article_comment_id: () => Promise<Int>;
  content: () => Promise<String>;
  pid: () => Promise<Int>;
  article_id: () => Promise<Int>;
  from_user_id: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleCommentEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticleCommentEntityPreviousValues>>,
    Fragmentable {
  article_comment_id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  pid: () => Promise<AsyncIterator<Int>>;
  article_id: () => Promise<AsyncIterator<Int>>;
  from_user_id: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PermissionEntityConnection {
  pageInfo: PageInfo;
  edges: PermissionEntityEdge[];
}

export interface PermissionEntityConnectionPromise
  extends Promise<PermissionEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PermissionEntityEdge>>() => T;
  aggregate: <T = AggregatePermissionEntityPromise>() => T;
}

export interface PermissionEntityConnectionSubscription
  extends Promise<AsyncIterator<PermissionEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PermissionEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePermissionEntitySubscription>() => T;
}

export interface ArticleCategoryEntityEdge {
  node: ArticleCategoryEntity;
  cursor: String;
}

export interface ArticleCategoryEntityEdgePromise
  extends Promise<ArticleCategoryEntityEdge>,
    Fragmentable {
  node: <T = ArticleCategoryEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleCategoryEntityEdgeSubscription
  extends Promise<AsyncIterator<ArticleCategoryEntityEdge>>,
    Fragmentable {
  node: <T = ArticleCategoryEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationEntityEdge {
  node: OrganizationEntity;
  cursor: String;
}

export interface OrganizationEntityEdgePromise
  extends Promise<OrganizationEntityEdge>,
    Fragmentable {
  node: <T = OrganizationEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEntityEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEntityEdge>>,
    Fragmentable {
  node: <T = OrganizationEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleEntitySubscriptionPayload {
  mutation: MutationType;
  node: ArticleEntity;
  updatedFields: String[];
  previousValues: ArticleEntityPreviousValues;
}

export interface ArticleEntitySubscriptionPayloadPromise
  extends Promise<ArticleEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticleEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticleEntityPreviousValuesPromise>() => T;
}

export interface ArticleEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticleEntityPreviousValuesSubscription>() => T;
}

export interface AggregateMessageEntity {
  count: Int;
}

export interface AggregateMessageEntityPromise
  extends Promise<AggregateMessageEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageEntitySubscription
  extends Promise<AsyncIterator<AggregateMessageEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticleEntityPreviousValues {
  article_id: Int;
  title: String;
  description: String;
  thumbs: String;
  icon: String;
  article_category_id: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface ArticleEntityPreviousValuesPromise
  extends Promise<ArticleEntityPreviousValues>,
    Fragmentable {
  article_id: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  thumbs: () => Promise<String>;
  icon: () => Promise<String>;
  article_category_id: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticleEntityPreviousValues>>,
    Fragmentable {
  article_id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  thumbs: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  article_category_id: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageEntityConnection {
  pageInfo: PageInfo;
  edges: MessageEntityEdge[];
}

export interface MessageEntityConnectionPromise
  extends Promise<MessageEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEntityEdge>>() => T;
  aggregate: <T = AggregateMessageEntityPromise>() => T;
}

export interface MessageEntityConnectionSubscription
  extends Promise<AsyncIterator<MessageEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageEntitySubscription>() => T;
}

export interface ArticleCategoryEntityConnection {
  pageInfo: PageInfo;
  edges: ArticleCategoryEntityEdge[];
}

export interface ArticleCategoryEntityConnectionPromise
  extends Promise<ArticleCategoryEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleCategoryEntityEdge>>() => T;
  aggregate: <T = AggregateArticleCategoryEntityPromise>() => T;
}

export interface ArticleCategoryEntityConnectionSubscription
  extends Promise<AsyncIterator<ArticleCategoryEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ArticleCategoryEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateArticleCategoryEntitySubscription>() => T;
}

export interface MessageEntity {
  msg_id: Int;
  content: String;
  msg_type: Int;
  pic_url: String;
  media_id: Int;
  thumb_media_id: Int;
  location_x: String;
  location_y: String;
  label: String;
  title: String;
  url: String;
  description: String;
  from_user: String;
  to_user: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface MessageEntityPromise
  extends Promise<MessageEntity>,
    Fragmentable {
  msg_id: () => Promise<Int>;
  content: () => Promise<String>;
  msg_type: () => Promise<Int>;
  pic_url: () => Promise<String>;
  media_id: () => Promise<Int>;
  thumb_media_id: () => Promise<Int>;
  location_x: () => Promise<String>;
  location_y: () => Promise<String>;
  label: () => Promise<String>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  description: () => Promise<String>;
  from_user: () => Promise<String>;
  to_user: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface MessageEntitySubscription
  extends Promise<AsyncIterator<MessageEntity>>,
    Fragmentable {
  msg_id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  msg_type: () => Promise<AsyncIterator<Int>>;
  pic_url: () => Promise<AsyncIterator<String>>;
  media_id: () => Promise<AsyncIterator<Int>>;
  thumb_media_id: () => Promise<AsyncIterator<Int>>;
  location_x: () => Promise<AsyncIterator<String>>;
  location_y: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  from_user: () => Promise<AsyncIterator<String>>;
  to_user: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageEntityNullablePromise
  extends Promise<MessageEntity | null>,
    Fragmentable {
  msg_id: () => Promise<Int>;
  content: () => Promise<String>;
  msg_type: () => Promise<Int>;
  pic_url: () => Promise<String>;
  media_id: () => Promise<Int>;
  thumb_media_id: () => Promise<Int>;
  location_x: () => Promise<String>;
  location_y: () => Promise<String>;
  label: () => Promise<String>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  description: () => Promise<String>;
  from_user: () => Promise<String>;
  to_user: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface LoggerEntitySubscriptionPayload {
  mutation: MutationType;
  node: LoggerEntity;
  updatedFields: String[];
  previousValues: LoggerEntityPreviousValues;
}

export interface LoggerEntitySubscriptionPayloadPromise
  extends Promise<LoggerEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LoggerEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LoggerEntityPreviousValuesPromise>() => T;
}

export interface LoggerEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LoggerEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LoggerEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LoggerEntityPreviousValuesSubscription>() => T;
}

export interface MemberEntityEdge {
  node: MemberEntity;
  cursor: String;
}

export interface MemberEntityEdgePromise
  extends Promise<MemberEntityEdge>,
    Fragmentable {
  node: <T = MemberEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MemberEntityEdgeSubscription
  extends Promise<AsyncIterator<MemberEntityEdge>>,
    Fragmentable {
  node: <T = MemberEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LoggerEntityPreviousValues {
  logger_id: Int;
  description: String;
  openid: String;
  start_time: DateTimeOutput;
  end_time: DateTimeOutput;
  params: String;
  ip: String;
  result: String;
  permissions: String;
}

export interface LoggerEntityPreviousValuesPromise
  extends Promise<LoggerEntityPreviousValues>,
    Fragmentable {
  logger_id: () => Promise<Int>;
  description: () => Promise<String>;
  openid: () => Promise<String>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  params: () => Promise<String>;
  ip: () => Promise<String>;
  result: () => Promise<String>;
  permissions: () => Promise<String>;
}

export interface LoggerEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<LoggerEntityPreviousValues>>,
    Fragmentable {
  logger_id: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  params: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  result: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<String>>;
}

export interface UserRoleEntitySubscriptionPayload {
  mutation: MutationType;
  node: UserRoleEntity;
  updatedFields: String[];
  previousValues: UserRoleEntityPreviousValues;
}

export interface UserRoleEntitySubscriptionPayloadPromise
  extends Promise<UserRoleEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRoleEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRoleEntityPreviousValuesPromise>() => T;
}

export interface UserRoleEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRoleEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRoleEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRoleEntityPreviousValuesSubscription>() => T;
}

export interface AddonEntity {
  appid: Int;
  pid: Int;
  appsecret: String;
  icon: String;
  name: String;
  title: String;
  description: String;
  status: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface AddonEntityPromise extends Promise<AddonEntity>, Fragmentable {
  appid: () => Promise<Int>;
  pid: () => Promise<Int>;
  appsecret: () => Promise<String>;
  icon: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  permissions: <T = FragmentableArray<PermissionEntity>>(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddonEntitySubscription
  extends Promise<AsyncIterator<AddonEntity>>,
    Fragmentable {
  appid: () => Promise<AsyncIterator<Int>>;
  pid: () => Promise<AsyncIterator<Int>>;
  appsecret: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  permissions: <
    T = Promise<AsyncIterator<PermissionEntitySubscription>>
  >(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddonEntityNullablePromise
  extends Promise<AddonEntity | null>,
    Fragmentable {
  appid: () => Promise<Int>;
  pid: () => Promise<Int>;
  appsecret: () => Promise<String>;
  icon: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  permissions: <T = FragmentableArray<PermissionEntity>>(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateLoggerEntity {
  count: Int;
}

export interface AggregateLoggerEntityPromise
  extends Promise<AggregateLoggerEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLoggerEntitySubscription
  extends Promise<AsyncIterator<AggregateLoggerEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MemberEntitySubscriptionPayload {
  mutation: MutationType;
  node: MemberEntity;
  updatedFields: String[];
  previousValues: MemberEntityPreviousValues;
}

export interface MemberEntitySubscriptionPayloadPromise
  extends Promise<MemberEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MemberEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MemberEntityPreviousValuesPromise>() => T;
}

export interface MemberEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MemberEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MemberEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MemberEntityPreviousValuesSubscription>() => T;
}

export interface LoggerEntityConnection {
  pageInfo: PageInfo;
  edges: LoggerEntityEdge[];
}

export interface LoggerEntityConnectionPromise
  extends Promise<LoggerEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LoggerEntityEdge>>() => T;
  aggregate: <T = AggregateLoggerEntityPromise>() => T;
}

export interface LoggerEntityConnectionSubscription
  extends Promise<AsyncIterator<LoggerEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LoggerEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLoggerEntitySubscription>() => T;
}

export interface MemberEntityPreviousValues {
  member_id: Int;
  name: String;
  realname: String;
  phone: String;
  openid: String;
  email: String;
  username: String;
  password: String;
  salt: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface MemberEntityPreviousValuesPromise
  extends Promise<MemberEntityPreviousValues>,
    Fragmentable {
  member_id: () => Promise<Int>;
  name: () => Promise<String>;
  realname: () => Promise<String>;
  phone: () => Promise<String>;
  openid: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  salt: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface MemberEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<MemberEntityPreviousValues>>,
    Fragmentable {
  member_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  realname: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  salt: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LoggerEntity {
  logger_id: Int;
  description: String;
  openid: String;
  start_time: DateTimeOutput;
  end_time: DateTimeOutput;
  params: String;
  ip: String;
  result: String;
  permissions: String;
}

export interface LoggerEntityPromise
  extends Promise<LoggerEntity>,
    Fragmentable {
  logger_id: () => Promise<Int>;
  description: () => Promise<String>;
  openid: () => Promise<String>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  params: () => Promise<String>;
  ip: () => Promise<String>;
  result: () => Promise<String>;
  permissions: () => Promise<String>;
}

export interface LoggerEntitySubscription
  extends Promise<AsyncIterator<LoggerEntity>>,
    Fragmentable {
  logger_id: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  params: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
  result: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<String>>;
}

export interface LoggerEntityNullablePromise
  extends Promise<LoggerEntity | null>,
    Fragmentable {
  logger_id: () => Promise<Int>;
  description: () => Promise<String>;
  openid: () => Promise<String>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  params: () => Promise<String>;
  ip: () => Promise<String>;
  result: () => Promise<String>;
  permissions: () => Promise<String>;
}

export interface ArticleCategoryEntity {
  article_category_id: Int;
  title: String;
  name: String;
  icon: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface ArticleCategoryEntityPromise
  extends Promise<ArticleCategoryEntity>,
    Fragmentable {
  article_category_id: () => Promise<Int>;
  title: () => Promise<String>;
  name: () => Promise<String>;
  icon: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleCategoryEntitySubscription
  extends Promise<AsyncIterator<ArticleCategoryEntity>>,
    Fragmentable {
  article_category_id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ArticleCategoryEntityNullablePromise
  extends Promise<ArticleCategoryEntity | null>,
    Fragmentable {
  article_category_id: () => Promise<Int>;
  title: () => Promise<String>;
  name: () => Promise<String>;
  icon: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface ArticleEntityEdge {
  node: ArticleEntity;
  cursor: String;
}

export interface ArticleEntityEdgePromise
  extends Promise<ArticleEntityEdge>,
    Fragmentable {
  node: <T = ArticleEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEntityEdgeSubscription
  extends Promise<AsyncIterator<ArticleEntityEdge>>,
    Fragmentable {
  node: <T = ArticleEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessageEntitySubscriptionPayload {
  mutation: MutationType;
  node: MessageEntity;
  updatedFields: String[];
  previousValues: MessageEntityPreviousValues;
}

export interface MessageEntitySubscriptionPayloadPromise
  extends Promise<MessageEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessageEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessageEntityPreviousValuesPromise>() => T;
}

export interface MessageEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessageEntityPreviousValuesSubscription>() => T;
}

export interface UserOrganizationEntityPreviousValues {
  user_orgainization_id: Int;
  openid: String;
  orgainization_id: Int;
}

export interface UserOrganizationEntityPreviousValuesPromise
  extends Promise<UserOrganizationEntityPreviousValues>,
    Fragmentable {
  user_orgainization_id: () => Promise<Int>;
  openid: () => Promise<String>;
  orgainization_id: () => Promise<Int>;
}

export interface UserOrganizationEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<UserOrganizationEntityPreviousValues>>,
    Fragmentable {
  user_orgainization_id: () => Promise<AsyncIterator<Int>>;
  openid: () => Promise<AsyncIterator<String>>;
  orgainization_id: () => Promise<AsyncIterator<Int>>;
}

export interface MessageEntityPreviousValues {
  msg_id: Int;
  content: String;
  msg_type: Int;
  pic_url: String;
  media_id: Int;
  thumb_media_id: Int;
  location_x: String;
  location_y: String;
  label: String;
  title: String;
  url: String;
  description: String;
  from_user: String;
  to_user: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface MessageEntityPreviousValuesPromise
  extends Promise<MessageEntityPreviousValues>,
    Fragmentable {
  msg_id: () => Promise<Int>;
  content: () => Promise<String>;
  msg_type: () => Promise<Int>;
  pic_url: () => Promise<String>;
  media_id: () => Promise<Int>;
  thumb_media_id: () => Promise<Int>;
  location_x: () => Promise<String>;
  location_y: () => Promise<String>;
  label: () => Promise<String>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  description: () => Promise<String>;
  from_user: () => Promise<String>;
  to_user: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface MessageEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<MessageEntityPreviousValues>>,
    Fragmentable {
  msg_id: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  msg_type: () => Promise<AsyncIterator<Int>>;
  pic_url: () => Promise<AsyncIterator<String>>;
  media_id: () => Promise<AsyncIterator<Int>>;
  thumb_media_id: () => Promise<AsyncIterator<Int>>;
  location_x: () => Promise<AsyncIterator<String>>;
  location_y: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  from_user: () => Promise<AsyncIterator<String>>;
  to_user: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserOrganizationEntitySubscriptionPayload {
  mutation: MutationType;
  node: UserOrganizationEntity;
  updatedFields: String[];
  previousValues: UserOrganizationEntityPreviousValues;
}

export interface UserOrganizationEntitySubscriptionPayloadPromise
  extends Promise<UserOrganizationEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserOrganizationEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserOrganizationEntityPreviousValuesPromise>() => T;
}

export interface UserOrganizationEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserOrganizationEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserOrganizationEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserOrganizationEntityPreviousValuesSubscription>() => T;
}

export interface AggregateAddonPermissionEntity {
  count: Int;
}

export interface AggregateAddonPermissionEntityPromise
  extends Promise<AggregateAddonPermissionEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddonPermissionEntitySubscription
  extends Promise<AsyncIterator<AggregateAddonPermissionEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEntityConnection {
  pageInfo: PageInfo;
  edges: UserEntityEdge[];
}

export interface UserEntityConnectionPromise
  extends Promise<UserEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEntityEdge>>() => T;
  aggregate: <T = AggregateUserEntityPromise>() => T;
}

export interface UserEntityConnectionSubscription
  extends Promise<AsyncIterator<UserEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserEntitySubscription>() => T;
}

export interface OrganizationEntitySubscriptionPayload {
  mutation: MutationType;
  node: OrganizationEntity;
  updatedFields: String[];
  previousValues: OrganizationEntityPreviousValues;
}

export interface OrganizationEntitySubscriptionPayloadPromise
  extends Promise<OrganizationEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationEntityPreviousValuesPromise>() => T;
}

export interface OrganizationEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationEntityPreviousValuesSubscription>() => T;
}

export interface RefreshTokenEntity {
  refresh_token_id: Int;
  refresh_token: String;
  expires_in: DateTimeOutput;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface RefreshTokenEntityPromise
  extends Promise<RefreshTokenEntity>,
    Fragmentable {
  refresh_token_id: () => Promise<Int>;
  token: <T = AccessTokenEntityPromise>() => T;
  refresh_token: () => Promise<String>;
  expires_in: () => Promise<DateTimeOutput>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface RefreshTokenEntitySubscription
  extends Promise<AsyncIterator<RefreshTokenEntity>>,
    Fragmentable {
  refresh_token_id: () => Promise<AsyncIterator<Int>>;
  token: <T = AccessTokenEntitySubscription>() => T;
  refresh_token: () => Promise<AsyncIterator<String>>;
  expires_in: () => Promise<AsyncIterator<DateTimeOutput>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RefreshTokenEntityNullablePromise
  extends Promise<RefreshTokenEntity | null>,
    Fragmentable {
  refresh_token_id: () => Promise<Int>;
  token: <T = AccessTokenEntityPromise>() => T;
  refresh_token: () => Promise<String>;
  expires_in: () => Promise<DateTimeOutput>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface OrganizationEntityPreviousValues {
  organization_id: Int;
  name: String;
  title: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
  displayorder: Int;
}

export interface OrganizationEntityPreviousValuesPromise
  extends Promise<OrganizationEntityPreviousValues>,
    Fragmentable {
  organization_id: () => Promise<Int>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  displayorder: () => Promise<Int>;
}

export interface OrganizationEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationEntityPreviousValues>>,
    Fragmentable {
  organization_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  displayorder: () => Promise<AsyncIterator<Int>>;
}

export interface RoleEntityConnection {
  pageInfo: PageInfo;
  edges: RoleEntityEdge[];
}

export interface RoleEntityConnectionPromise
  extends Promise<RoleEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEntityEdge>>() => T;
  aggregate: <T = AggregateRoleEntityPromise>() => T;
}

export interface RoleEntityConnectionSubscription
  extends Promise<AsyncIterator<RoleEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleEntitySubscription>() => T;
}

export interface AddonPermissionEntityEdge {
  node: AddonPermissionEntity;
  cursor: String;
}

export interface AddonPermissionEntityEdgePromise
  extends Promise<AddonPermissionEntityEdge>,
    Fragmentable {
  node: <T = AddonPermissionEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddonPermissionEntityEdgeSubscription
  extends Promise<AsyncIterator<AddonPermissionEntityEdge>>,
    Fragmentable {
  node: <T = AddonPermissionEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePostEntity {
  count: Int;
}

export interface AggregatePostEntityPromise
  extends Promise<AggregatePostEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostEntitySubscription
  extends Promise<AsyncIterator<AggregatePostEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PermissionEntitySubscriptionPayload {
  mutation: MutationType;
  node: PermissionEntity;
  updatedFields: String[];
  previousValues: PermissionEntityPreviousValues;
}

export interface PermissionEntitySubscriptionPayloadPromise
  extends Promise<PermissionEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PermissionEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PermissionEntityPreviousValuesPromise>() => T;
}

export interface PermissionEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PermissionEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PermissionEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PermissionEntityPreviousValuesSubscription>() => T;
}

export interface AggregatePostCategoryEntity {
  count: Int;
}

export interface AggregatePostCategoryEntityPromise
  extends Promise<AggregatePostCategoryEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostCategoryEntitySubscription
  extends Promise<AsyncIterator<AggregatePostCategoryEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PermissionEntityPreviousValues {
  father_name: String;
  name: String;
  title: String;
  decription: String;
  value: String[];
  icon: String;
  status: Int;
  displayorder: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface PermissionEntityPreviousValuesPromise
  extends Promise<PermissionEntityPreviousValues>,
    Fragmentable {
  father_name: () => Promise<String>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  decription: () => Promise<String>;
  value: () => Promise<String[]>;
  icon: () => Promise<String>;
  status: () => Promise<Int>;
  displayorder: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PermissionEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<PermissionEntityPreviousValues>>,
    Fragmentable {
  father_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  decription: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String[]>>;
  icon: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  displayorder: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostCategoryEntity {
  post_post_category_idid: Int;
  title: String;
  icon: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface PostCategoryEntityPromise
  extends Promise<PostCategoryEntity>,
    Fragmentable {
  post_post_category_idid: () => Promise<Int>;
  title: () => Promise<String>;
  icon: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PostCategoryEntitySubscription
  extends Promise<AsyncIterator<PostCategoryEntity>>,
    Fragmentable {
  post_post_category_idid: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostCategoryEntityNullablePromise
  extends Promise<PostCategoryEntity | null>,
    Fragmentable {
  post_post_category_idid: () => Promise<Int>;
  title: () => Promise<String>;
  icon: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface AddonPermissionEntityConnection {
  pageInfo: PageInfo;
  edges: AddonPermissionEntityEdge[];
}

export interface AddonPermissionEntityConnectionPromise
  extends Promise<AddonPermissionEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddonPermissionEntityEdge>>() => T;
  aggregate: <T = AggregateAddonPermissionEntityPromise>() => T;
}

export interface AddonPermissionEntityConnectionSubscription
  extends Promise<AsyncIterator<AddonPermissionEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<AddonPermissionEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateAddonPermissionEntitySubscription>() => T;
}

export interface AggregateOrganizationEntity {
  count: Int;
}

export interface AggregateOrganizationEntityPromise
  extends Promise<AggregateOrganizationEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationEntitySubscription
  extends Promise<AsyncIterator<AggregateOrganizationEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostCategoryEntitySubscriptionPayload {
  mutation: MutationType;
  node: PostCategoryEntity;
  updatedFields: String[];
  previousValues: PostCategoryEntityPreviousValues;
}

export interface PostCategoryEntitySubscriptionPayloadPromise
  extends Promise<PostCategoryEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostCategoryEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostCategoryEntityPreviousValuesPromise>() => T;
}

export interface PostCategoryEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostCategoryEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostCategoryEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostCategoryEntityPreviousValuesSubscription>() => T;
}

export interface MessageEntityEdge {
  node: MessageEntity;
  cursor: String;
}

export interface MessageEntityEdgePromise
  extends Promise<MessageEntityEdge>,
    Fragmentable {
  node: <T = MessageEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEntityEdgeSubscription
  extends Promise<AsyncIterator<MessageEntityEdge>>,
    Fragmentable {
  node: <T = MessageEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostCategoryEntityPreviousValues {
  post_post_category_idid: Int;
  title: String;
  icon: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface PostCategoryEntityPreviousValuesPromise
  extends Promise<PostCategoryEntityPreviousValues>,
    Fragmentable {
  post_post_category_idid: () => Promise<Int>;
  title: () => Promise<String>;
  icon: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PostCategoryEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<PostCategoryEntityPreviousValues>>,
    Fragmentable {
  post_post_category_idid: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateMemberEntity {
  count: Int;
}

export interface AggregateMemberEntityPromise
  extends Promise<AggregateMemberEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMemberEntitySubscription
  extends Promise<AsyncIterator<AggregateMemberEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddonPermissionEntity {
  addon_permission_id: Int;
  addon_id: Int;
  permission_id: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface AddonPermissionEntityPromise
  extends Promise<AddonPermissionEntity>,
    Fragmentable {
  addon_permission_id: () => Promise<Int>;
  addon_id: () => Promise<Int>;
  permission_id: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface AddonPermissionEntitySubscription
  extends Promise<AsyncIterator<AddonPermissionEntity>>,
    Fragmentable {
  addon_permission_id: () => Promise<AsyncIterator<Int>>;
  addon_id: () => Promise<AsyncIterator<Int>>;
  permission_id: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AddonPermissionEntityNullablePromise
  extends Promise<AddonPermissionEntity | null>,
    Fragmentable {
  addon_permission_id: () => Promise<Int>;
  addon_id: () => Promise<Int>;
  permission_id: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface MemberEntity {
  member_id: Int;
  name: String;
  realname: String;
  phone: String;
  openid: String;
  email: String;
  username: String;
  password: String;
  salt: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface MemberEntityPromise
  extends Promise<MemberEntity>,
    Fragmentable {
  member_id: () => Promise<Int>;
  name: () => Promise<String>;
  realname: () => Promise<String>;
  phone: () => Promise<String>;
  openid: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  salt: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface MemberEntitySubscription
  extends Promise<AsyncIterator<MemberEntity>>,
    Fragmentable {
  member_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  realname: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  salt: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MemberEntityNullablePromise
  extends Promise<MemberEntity | null>,
    Fragmentable {
  member_id: () => Promise<Int>;
  name: () => Promise<String>;
  realname: () => Promise<String>;
  phone: () => Promise<String>;
  openid: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  salt: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PostEntitySubscriptionPayload {
  mutation: MutationType;
  node: PostEntity;
  updatedFields: String[];
  previousValues: PostEntityPreviousValues;
}

export interface PostEntitySubscriptionPayloadPromise
  extends Promise<PostEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostEntityPreviousValuesPromise>() => T;
}

export interface PostEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostEntityPreviousValuesSubscription>() => T;
}

export interface AccessTokenEntityEdge {
  node: AccessTokenEntity;
  cursor: String;
}

export interface AccessTokenEntityEdgePromise
  extends Promise<AccessTokenEntityEdge>,
    Fragmentable {
  node: <T = AccessTokenEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccessTokenEntityEdgeSubscription
  extends Promise<AsyncIterator<AccessTokenEntityEdge>>,
    Fragmentable {
  node: <T = AccessTokenEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostEntityPreviousValues {
  post_id: Int;
  title: String;
  content: String;
  status: Int;
  handler_user: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface PostEntityPreviousValuesPromise
  extends Promise<PostEntityPreviousValues>,
    Fragmentable {
  post_id: () => Promise<Int>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<Int>;
  handler_user: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface PostEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<PostEntityPreviousValues>>,
    Fragmentable {
  post_id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  handler_user: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEntity {
  user_id: Int;
  openid: String;
  unionid: String;
  username: String;
  password: String;
  salt: String;
  realname: String;
  nickname: String;
  avatar: String;
  phone: String;
  email: String;
  sex: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface UserEntityPromise extends Promise<UserEntity>, Fragmentable {
  user_id: () => Promise<Int>;
  openid: () => Promise<String>;
  unionid: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  salt: () => Promise<String>;
  realname: () => Promise<String>;
  nickname: () => Promise<String>;
  avatar: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  sex: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  permissions: <T = FragmentableArray<PermissionEntity>>(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<RoleEntity>>(args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizations: <T = FragmentableArray<OrganizationEntity>>(args?: {
    where?: OrganizationEntityWhereInput;
    orderBy?: OrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEntitySubscription
  extends Promise<AsyncIterator<UserEntity>>,
    Fragmentable {
  user_id: () => Promise<AsyncIterator<Int>>;
  openid: () => Promise<AsyncIterator<String>>;
  unionid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  salt: () => Promise<AsyncIterator<String>>;
  realname: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  permissions: <
    T = Promise<AsyncIterator<PermissionEntitySubscription>>
  >(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = Promise<AsyncIterator<RoleEntitySubscription>>>(args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizations: <
    T = Promise<AsyncIterator<OrganizationEntitySubscription>>
  >(args?: {
    where?: OrganizationEntityWhereInput;
    orderBy?: OrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEntityNullablePromise
  extends Promise<UserEntity | null>,
    Fragmentable {
  user_id: () => Promise<Int>;
  openid: () => Promise<String>;
  unionid: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  salt: () => Promise<String>;
  realname: () => Promise<String>;
  nickname: () => Promise<String>;
  avatar: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  sex: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  permissions: <T = FragmentableArray<PermissionEntity>>(args?: {
    where?: PermissionEntityWhereInput;
    orderBy?: PermissionEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  roles: <T = FragmentableArray<RoleEntity>>(args?: {
    where?: RoleEntityWhereInput;
    orderBy?: RoleEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizations: <T = FragmentableArray<OrganizationEntity>>(args?: {
    where?: OrganizationEntityWhereInput;
    orderBy?: OrganizationEntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateAddonEntity {
  count: Int;
}

export interface AggregateAddonEntityPromise
  extends Promise<AggregateAddonEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddonEntitySubscription
  extends Promise<AsyncIterator<AggregateAddonEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserEntity {
  count: Int;
}

export interface AggregateUserEntityPromise
  extends Promise<AggregateUserEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserEntitySubscription
  extends Promise<AsyncIterator<AggregateUserEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RefreshTokenEntitySubscriptionPayload {
  mutation: MutationType;
  node: RefreshTokenEntity;
  updatedFields: String[];
  previousValues: RefreshTokenEntityPreviousValues;
}

export interface RefreshTokenEntitySubscriptionPayloadPromise
  extends Promise<RefreshTokenEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RefreshTokenEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RefreshTokenEntityPreviousValuesPromise>() => T;
}

export interface RefreshTokenEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RefreshTokenEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RefreshTokenEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RefreshTokenEntityPreviousValuesSubscription>() => T;
}

export interface AggregateRoleEntity {
  count: Int;
}

export interface AggregateRoleEntityPromise
  extends Promise<AggregateRoleEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleEntitySubscription
  extends Promise<AsyncIterator<AggregateRoleEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RefreshTokenEntityPreviousValues {
  refresh_token_id: Int;
  refresh_token: String;
  expires_in: DateTimeOutput;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface RefreshTokenEntityPreviousValuesPromise
  extends Promise<RefreshTokenEntityPreviousValues>,
    Fragmentable {
  refresh_token_id: () => Promise<Int>;
  refresh_token: () => Promise<String>;
  expires_in: () => Promise<DateTimeOutput>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface RefreshTokenEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<RefreshTokenEntityPreviousValues>>,
    Fragmentable {
  refresh_token_id: () => Promise<AsyncIterator<Int>>;
  refresh_token: () => Promise<AsyncIterator<String>>;
  expires_in: () => Promise<AsyncIterator<DateTimeOutput>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostEntityConnection {
  pageInfo: PageInfo;
  edges: PostEntityEdge[];
}

export interface PostEntityConnectionPromise
  extends Promise<PostEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEntityEdge>>() => T;
  aggregate: <T = AggregatePostEntityPromise>() => T;
}

export interface PostEntityConnectionSubscription
  extends Promise<AsyncIterator<PostEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostEntitySubscription>() => T;
}

export interface AddonEntityEdge {
  node: AddonEntity;
  cursor: String;
}

export interface AddonEntityEdgePromise
  extends Promise<AddonEntityEdge>,
    Fragmentable {
  node: <T = AddonEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddonEntityEdgeSubscription
  extends Promise<AsyncIterator<AddonEntityEdge>>,
    Fragmentable {
  node: <T = AddonEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PermissionEntityEdge {
  node: PermissionEntity;
  cursor: String;
}

export interface PermissionEntityEdgePromise
  extends Promise<PermissionEntityEdge>,
    Fragmentable {
  node: <T = PermissionEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PermissionEntityEdgeSubscription
  extends Promise<AsyncIterator<PermissionEntityEdge>>,
    Fragmentable {
  node: <T = PermissionEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleEntitySubscriptionPayload {
  mutation: MutationType;
  node: RoleEntity;
  updatedFields: String[];
  previousValues: RoleEntityPreviousValues;
}

export interface RoleEntitySubscriptionPayloadPromise
  extends Promise<RoleEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoleEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoleEntityPreviousValuesPromise>() => T;
}

export interface RoleEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoleEntityPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleEntityPreviousValues {
  role_id: Int;
  name: String;
  title: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface RoleEntityPreviousValuesPromise
  extends Promise<RoleEntityPreviousValues>,
    Fragmentable {
  role_id: () => Promise<Int>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface RoleEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<RoleEntityPreviousValues>>,
    Fragmentable {
  role_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LoggerEntityEdge {
  node: LoggerEntity;
  cursor: String;
}

export interface LoggerEntityEdgePromise
  extends Promise<LoggerEntityEdge>,
    Fragmentable {
  node: <T = LoggerEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LoggerEntityEdgeSubscription
  extends Promise<AsyncIterator<LoggerEntityEdge>>,
    Fragmentable {
  node: <T = LoggerEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AddonEntityConnection {
  pageInfo: PageInfo;
  edges: AddonEntityEdge[];
}

export interface AddonEntityConnectionPromise
  extends Promise<AddonEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddonEntityEdge>>() => T;
  aggregate: <T = AggregateAddonEntityPromise>() => T;
}

export interface AddonEntityConnectionSubscription
  extends Promise<AsyncIterator<AddonEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddonEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddonEntitySubscription>() => T;
}

export interface UserRoleEntityEdge {
  node: UserRoleEntity;
  cursor: String;
}

export interface UserRoleEntityEdgePromise
  extends Promise<UserRoleEntityEdge>,
    Fragmentable {
  node: <T = UserRoleEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRoleEntityEdgeSubscription
  extends Promise<AsyncIterator<UserRoleEntityEdge>>,
    Fragmentable {
  node: <T = UserRoleEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RolePermissionEntitySubscriptionPayload {
  mutation: MutationType;
  node: RolePermissionEntity;
  updatedFields: String[];
  previousValues: RolePermissionEntityPreviousValues;
}

export interface RolePermissionEntitySubscriptionPayloadPromise
  extends Promise<RolePermissionEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePermissionEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePermissionEntityPreviousValuesPromise>() => T;
}

export interface RolePermissionEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RolePermissionEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RolePermissionEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePermissionEntityPreviousValuesSubscription>() => T;
}

export interface RefreshTokenEntityEdge {
  node: RefreshTokenEntity;
  cursor: String;
}

export interface RefreshTokenEntityEdgePromise
  extends Promise<RefreshTokenEntityEdge>,
    Fragmentable {
  node: <T = RefreshTokenEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RefreshTokenEntityEdgeSubscription
  extends Promise<AsyncIterator<RefreshTokenEntityEdge>>,
    Fragmentable {
  node: <T = RefreshTokenEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationEntityConnection {
  pageInfo: PageInfo;
  edges: OrganizationEntityEdge[];
}

export interface OrganizationEntityConnectionPromise
  extends Promise<OrganizationEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEntityEdge>>() => T;
  aggregate: <T = AggregateOrganizationEntityPromise>() => T;
}

export interface OrganizationEntityConnectionSubscription
  extends Promise<AsyncIterator<OrganizationEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<OrganizationEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateOrganizationEntitySubscription>() => T;
}

export interface UserEntityPreviousValues {
  user_id: Int;
  openid: String;
  unionid: String;
  username: String;
  password: String;
  salt: String;
  realname: String;
  nickname: String;
  avatar: String;
  phone: String;
  email: String;
  sex: Int;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
}

export interface UserEntityPreviousValuesPromise
  extends Promise<UserEntityPreviousValues>,
    Fragmentable {
  user_id: () => Promise<Int>;
  openid: () => Promise<String>;
  unionid: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  salt: () => Promise<String>;
  realname: () => Promise<String>;
  nickname: () => Promise<String>;
  avatar: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  sex: () => Promise<Int>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
}

export interface UserEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<UserEntityPreviousValues>>,
    Fragmentable {
  user_id: () => Promise<AsyncIterator<Int>>;
  openid: () => Promise<AsyncIterator<String>>;
  unionid: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  salt: () => Promise<AsyncIterator<String>>;
  realname: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<Int>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEntitySubscriptionPayload {
  mutation: MutationType;
  node: UserEntity;
  updatedFields: String[];
  previousValues: UserEntityPreviousValues;
}

export interface UserEntitySubscriptionPayloadPromise
  extends Promise<UserEntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserEntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserEntityPreviousValuesPromise>() => T;
}

export interface UserEntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserEntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserEntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserEntityPreviousValuesSubscription>() => T;
}

export interface OrganizationEntity {
  organization_id: Int;
  name: String;
  title: String;
  description: String;
  create_time: DateTimeOutput;
  update_time: DateTimeOutput;
  displayorder: Int;
}

export interface OrganizationEntityPromise
  extends Promise<OrganizationEntity>,
    Fragmentable {
  organization_id: () => Promise<Int>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  displayorder: () => Promise<Int>;
}

export interface OrganizationEntitySubscription
  extends Promise<AsyncIterator<OrganizationEntity>>,
    Fragmentable {
  organization_id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  create_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  update_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  displayorder: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationEntityNullablePromise
  extends Promise<OrganizationEntity | null>,
    Fragmentable {
  organization_id: () => Promise<Int>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  create_time: () => Promise<DateTimeOutput>;
  update_time: () => Promise<DateTimeOutput>;
  displayorder: () => Promise<Int>;
}

export interface RolePermissionEntityPreviousValues {
  role_permission_id: Int;
  role_id: Int;
  permission_id: Int;
}

export interface RolePermissionEntityPreviousValuesPromise
  extends Promise<RolePermissionEntityPreviousValues>,
    Fragmentable {
  role_permission_id: () => Promise<Int>;
  role_id: () => Promise<Int>;
  permission_id: () => Promise<Int>;
}

export interface RolePermissionEntityPreviousValuesSubscription
  extends Promise<AsyncIterator<RolePermissionEntityPreviousValues>>,
    Fragmentable {
  role_permission_id: () => Promise<AsyncIterator<Int>>;
  role_id: () => Promise<AsyncIterator<Int>>;
  permission_id: () => Promise<AsyncIterator<Int>>;
}

export interface MemberEntityConnection {
  pageInfo: PageInfo;
  edges: MemberEntityEdge[];
}

export interface MemberEntityConnectionPromise
  extends Promise<MemberEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MemberEntityEdge>>() => T;
  aggregate: <T = AggregateMemberEntityPromise>() => T;
}

export interface MemberEntityConnectionSubscription
  extends Promise<AsyncIterator<MemberEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MemberEntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMemberEntitySubscription>() => T;
}

export interface PostCategoryEntityConnection {
  pageInfo: PageInfo;
  edges: PostCategoryEntityEdge[];
}

export interface PostCategoryEntityConnectionPromise
  extends Promise<PostCategoryEntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostCategoryEntityEdge>>() => T;
  aggregate: <T = AggregatePostCategoryEntityPromise>() => T;
}

export interface PostCategoryEntityConnectionSubscription
  extends Promise<AsyncIterator<PostCategoryEntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<PostCategoryEntityEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregatePostCategoryEntitySubscription>() => T;
}

export interface RolePermissionEntityEdge {
  node: RolePermissionEntity;
  cursor: String;
}

export interface RolePermissionEntityEdgePromise
  extends Promise<RolePermissionEntityEdge>,
    Fragmentable {
  node: <T = RolePermissionEntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RolePermissionEntityEdgeSubscription
  extends Promise<AsyncIterator<RolePermissionEntityEdge>>,
    Fragmentable {
  node: <T = RolePermissionEntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArticleEntity {
  count: Int;
}

export interface AggregateArticleEntityPromise
  extends Promise<AggregateArticleEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleEntitySubscription
  extends Promise<AsyncIterator<AggregateArticleEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AccessTokenEntity",
    embedded: false
  },
  {
    name: "AddonEntity",
    embedded: false
  },
  {
    name: "AddonPermissionEntity",
    embedded: false
  },
  {
    name: "ArticleEntity",
    embedded: false
  },
  {
    name: "ArticleCategoryEntity",
    embedded: false
  },
  {
    name: "ArticleCommentEntity",
    embedded: false
  },
  {
    name: "LoggerEntity",
    embedded: false
  },
  {
    name: "MemberEntity",
    embedded: false
  },
  {
    name: "MessageEntity",
    embedded: false
  },
  {
    name: "OrganizationEntity",
    embedded: false
  },
  {
    name: "PermissionEntity",
    embedded: false
  },
  {
    name: "PostEntity",
    embedded: false
  },
  {
    name: "PostCategoryEntity",
    embedded: false
  },
  {
    name: "RefreshTokenEntity",
    embedded: false
  },
  {
    name: "RoleEntity",
    embedded: false
  },
  {
    name: "RolePermissionEntity",
    embedded: false
  },
  {
    name: "UserEntity",
    embedded: false
  },
  {
    name: "UserOrganizationEntity",
    embedded: false
  },
  {
    name: "UserRoleEntity",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
